{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { dispatchEvent } from '../../common/helpers/dom';\nimport { cb2PromiseWithResolve } from '../../common/helpers/util';\nimport CubeFormGroup from './form-group.vue';\nimport LAYOUTS from './layouts';\nimport mixin from './mixin';\nvar COMPONENT_NAME = 'cube-form';\nvar EVENT_SUBMIT = 'submit';\nvar EVENT_RESET = 'reset';\nvar EVENT_VALIDATE = 'validate';\nvar EVENT_VALID = 'valid';\nvar EVENT_INVALID = 'invalid';\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [mixin],\n  props: {\n    action: String,\n    model: {\n      type: Object,\n      \"default\": function _default() {\n        /* istanbul ignore next */\n        return {};\n      }\n    },\n    schema: {\n      type: Object,\n      \"default\": function _default() {\n        /* istanbul ignore next */\n        return {};\n      }\n    },\n    options: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          scrollToInvalidField: false,\n          layout: LAYOUTS.STANDARD\n        };\n      }\n    },\n    immediateValidate: {\n      type: Boolean,\n      \"default\": false\n    },\n    submitAlwaysValidate: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  data: function data() {\n    return {\n      validatedCount: 0,\n      dirty: false,\n      firstInvalidField: null,\n      firstInvalidFieldIndex: -1\n    };\n  },\n  computed: {\n    fieldsModel: function fieldsModel() {\n      var model = {};\n      this.fields.forEach(function (fieldComponent) {\n        if (!fieldComponent.isBtnField) {\n          model[fieldComponent.fieldValue.modelKey] = fieldComponent.modelValue;\n        }\n      });\n      return model;\n    },\n    groups: function groups() {\n      var schema = this.schema;\n      var groups = schema.groups || [];\n      if (schema.fields) {\n        groups.unshift({\n          fields: schema.fields\n        });\n      }\n      return groups;\n    },\n    fieldsData: function fieldsData() {\n      return this.groups.reduce(function (fields, group) {\n        group.fields.reduce(function (fields, field) {\n          fields.push(field);\n          return fields;\n        }, fields);\n        return fields;\n      }, []);\n    },\n    layout: function layout() {\n      var options = this.options;\n      var layout = options && options.layout || LAYOUTS.STANDARD;\n      return layout;\n    },\n    formClass: function formClass() {\n      var invalid = this.invalid;\n      var valid = this.valid;\n      var layout = this.layout;\n      return {\n        'cube-form_standard': layout === LAYOUTS.STANDARD,\n        'cube-form_groups': this.groups.length > 1,\n        'cube-form_validating': this.validating,\n        'cube-form_pending': this.pending,\n        'cube-form_valid': valid,\n        'cube-form_invalid': invalid,\n        'cube-form_classic': layout === LAYOUTS.CLASSIC,\n        'cube-form_fresh': layout === LAYOUTS.FRESH\n      };\n    }\n  },\n  watch: {\n    validatedCount: function validatedCount() {\n      this.$emit(EVENT_VALIDATE, {\n        validity: this.validity,\n        valid: this.valid,\n        invalid: this.invalid,\n        dirty: this.dirty,\n        firstInvalidFieldIndex: this.firstInvalidFieldIndex\n      });\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    this.form = this;\n    this.fields = [];\n    this.validity = {};\n  },\n  mounted: function mounted() {\n    if (this.immediateValidate) {\n      this.validate();\n    }\n  },\n  methods: {\n    submit: function submit() {\n      var skipValidate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.skipValidate = skipValidate;\n      dispatchEvent(this.$refs.form, 'submit');\n      this.skipValidate = false;\n    },\n    reset: function reset() {\n      dispatchEvent(this.$refs.form, 'reset');\n    },\n    submitHandler: function submitHandler(e) {\n      var _this = this;\n      // sync all fields value because of trigger: blur or debounce\n      this.syncValidatorValues();\n      if (this.skipValidate) {\n        this.$emit(EVENT_SUBMIT, e, this.model, this.fieldsModel);\n        return;\n      }\n      var submited = function submited(submitResult) {\n        if (submitResult) {\n          _this.$emit(EVENT_VALID, _this.validity);\n          _this.$emit(EVENT_SUBMIT, e, _this.model, _this.fieldsModel);\n        } else {\n          // scrollToInvalidField\n          if (_this.options.scrollToInvalidField && _this.firstInvalidField) {\n            _this.firstInvalidField.$el.scrollIntoView();\n          }\n          e.preventDefault();\n          _this.$emit(EVENT_INVALID, _this.validity);\n        }\n      };\n      if (this.submitAlwaysValidate || this.valid === undefined) {\n        this._submit(submited);\n        if (this.validating || this.pending) {\n          // async validate\n          e.preventDefault();\n        }\n      } else {\n        submited(this.valid);\n      }\n    },\n    resetHandler: function resetHandler(e) {\n      this._reset();\n      this.$emit(EVENT_RESET, e);\n    },\n    _submit: function _submit(cb) {\n      var _this2 = this;\n      this.validate(function () {\n        cb && cb(_this2.valid);\n      });\n    },\n    _reset: function _reset() {\n      this.fields.forEach(function (fieldComponent) {\n        fieldComponent.reset();\n      });\n      this.setValidity();\n      this.setValidating();\n      this.setPending();\n    },\n    syncValidatorValues: function syncValidatorValues() {\n      this.fields.forEach(function (fieldComponent) {\n        fieldComponent.syncValidatorValue();\n      });\n    },\n    validate: function validate(cb) {\n      var _this3 = this;\n      var promise = cb2PromiseWithResolve(cb);\n      if (promise) {\n        cb = promise.resolve;\n      }\n      var doneCount = 0;\n      var len = this.fields.length;\n      this.originValid = undefined;\n      this.fields.forEach(function (fieldComponent) {\n        fieldComponent.validate(function () {\n          doneCount++;\n          if (doneCount === len) {\n            // all done\n            cb && cb(_this3.valid);\n          }\n        });\n      });\n      return promise;\n    },\n    updateValidating: function updateValidating() {\n      var validating = this.fields.some(function (fieldComponent) {\n        return fieldComponent.validating;\n      });\n      this.setValidating(validating);\n    },\n    updatePending: function updatePending() {\n      var pending = this.fields.some(function (fieldComponent) {\n        return fieldComponent.pending;\n      });\n      this.setPending(pending);\n    },\n    setValidating: function setValidating() {\n      var validating = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.validating = validating;\n    },\n    setPending: function setPending() {\n      var pending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.pending = pending;\n    },\n    updateValidity: function updateValidity(modelKey, valid, result, dirty) {\n      var curResult = this.validity[modelKey];\n      if (curResult && curResult.valid === valid && curResult.result === result && curResult.dirty === dirty) {\n        return;\n      }\n      this.setValidity(modelKey, {\n        valid: valid,\n        result: result,\n        dirty: dirty\n      });\n    },\n    setValidity: function setValidity(key, val) {\n      var validity = {};\n      if (key) {\n        Object.assign(validity, this.validity);\n        if (val === undefined) {\n          delete validity[key];\n        } else {\n          validity[key] = val;\n        }\n      }\n      var dirty = false;\n      var invalid = false;\n      var valid = true;\n      var firstInvalidFieldKey = '';\n      this.fields.forEach(function (fieldComponent) {\n        var modelKey = fieldComponent.fieldValue.modelKey;\n        if (modelKey) {\n          var retVal = validity[modelKey];\n          if (retVal) {\n            if (retVal.dirty) {\n              dirty = true;\n            }\n            if (retVal.valid === false) {\n              valid = false;\n            } else if (valid && !retVal.valid) {\n              valid = retVal.valid;\n            }\n            if (!invalid && retVal.valid === false) {\n              // invalid\n              invalid = true;\n              firstInvalidFieldKey = modelKey;\n            }\n          } else if (fieldComponent.hasRules) {\n            if (valid) {\n              valid = undefined;\n            }\n            validity[modelKey] = {\n              valid: undefined,\n              result: {},\n              dirty: false\n            };\n          }\n        }\n      });\n      this.validity = validity;\n      this.dirty = dirty;\n      this.originValid = valid;\n      this.setFirstInvalid(firstInvalidFieldKey);\n      this.validatedCount++;\n    },\n    setFirstInvalid: function setFirstInvalid(key) {\n      var _this4 = this;\n      if (!key) {\n        this.firstInvalidField = null;\n        this.firstInvalidFieldIndex = -1;\n        return;\n      }\n      this.fields.some(function (fieldComponent, index) {\n        if (fieldComponent.fieldValue.modelKey === key) {\n          _this4.firstInvalidField = fieldComponent;\n          _this4.firstInvalidFieldIndex = index;\n          return true;\n        }\n      });\n    },\n    addField: function addField(fieldComponent) {\n      var i = this.fieldsData.indexOf(fieldComponent.field);\n      this.fields.splice(i, 0, fieldComponent);\n      var modelKey = fieldComponent.fieldValue.modelKey;\n      modelKey && this.setValidity(modelKey);\n    },\n    destroyField: function destroyField(fieldComponent) {\n      var i = this.fields.indexOf(fieldComponent);\n      this.fields.splice(i, 1);\n      var modelKey = fieldComponent.fieldValue.modelKey;\n      modelKey && this.setValidity(modelKey);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.form = null;\n    this.firstInvalidField = null;\n  },\n  components: {\n    CubeFormGroup: CubeFormGroup\n  }\n};","map":{"version":3,"names":["dispatchEvent","cb2PromiseWithResolve","CubeFormGroup","LAYOUTS","mixin","COMPONENT_NAME","EVENT_SUBMIT","EVENT_RESET","EVENT_VALIDATE","EVENT_VALID","EVENT_INVALID","name","mixins","props","action","String","model","type","Object","_default","schema","options","scrollToInvalidField","layout","STANDARD","immediateValidate","Boolean","submitAlwaysValidate","data","validatedCount","dirty","firstInvalidField","firstInvalidFieldIndex","computed","fieldsModel","fields","forEach","fieldComponent","isBtnField","fieldValue","modelKey","modelValue","groups","unshift","fieldsData","reduce","group","field","push","formClass","invalid","valid","length","validating","pending","CLASSIC","FRESH","watch","$emit","validity","beforeCreate","form","mounted","validate","methods","submit","skipValidate","arguments","undefined","$refs","reset","submitHandler","e","_this","syncValidatorValues","submited","submitResult","$el","scrollIntoView","preventDefault","_submit","resetHandler","_reset","cb","_this2","setValidity","setValidating","setPending","syncValidatorValue","_this3","promise","resolve","doneCount","len","originValid","updateValidating","some","updatePending","updateValidity","result","curResult","key","val","assign","firstInvalidFieldKey","retVal","hasRules","setFirstInvalid","_this4","index","addField","i","indexOf","splice","destroyField","beforeDestroy","components"],"sources":["node_modules/cube-ui/src/components/form/form.vue"],"sourcesContent":["<template>\n  <form ref=\"form\" class=\"cube-form\" :class=\"formClass\" :action=\"action\" @submit=\"submitHandler\" @reset=\"resetHandler\">\n    <slot>\n      <cube-form-group\n        v-for=\"(group, index) in groups\"\n        :fields=\"group.fields\"\n        :legend=\"group.legend\"\n        :key=\"group.key || index\" />\n    </slot>\n  </form>\n</template>\n\n<script>\n  import { dispatchEvent } from '../../common/helpers/dom'\n  import { cb2PromiseWithResolve } from '../../common/helpers/util'\n  import CubeFormGroup from './form-group.vue'\n  import LAYOUTS from './layouts'\n  import mixin from './mixin'\n\n  const COMPONENT_NAME = 'cube-form'\n  const EVENT_SUBMIT = 'submit'\n  const EVENT_RESET = 'reset'\n  const EVENT_VALIDATE = 'validate'\n  const EVENT_VALID = 'valid'\n  const EVENT_INVALID = 'invalid'\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [mixin],\n    props: {\n      action: String,\n      model: {\n        type: Object,\n        default() {\n          /* istanbul ignore next */\n          return {}\n        }\n      },\n      schema: {\n        type: Object,\n        default() {\n          /* istanbul ignore next */\n          return {}\n        }\n      },\n      options: {\n        type: Object,\n        default() {\n          return {\n            scrollToInvalidField: false,\n            layout: LAYOUTS.STANDARD\n          }\n        }\n      },\n      immediateValidate: {\n        type: Boolean,\n        default: false\n      },\n      submitAlwaysValidate: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data() {\n      return {\n        validatedCount: 0,\n        dirty: false,\n        firstInvalidField: null,\n        firstInvalidFieldIndex: -1\n      }\n    },\n    computed: {\n      fieldsModel() {\n        const model = {}\n        this.fields.forEach((fieldComponent) => {\n          if (!fieldComponent.isBtnField) {\n            model[fieldComponent.fieldValue.modelKey] = fieldComponent.modelValue\n          }\n        })\n        return model\n      },\n      groups() {\n        const schema = this.schema\n        const groups = schema.groups || []\n        if (schema.fields) {\n          groups.unshift({\n            fields: schema.fields\n          })\n        }\n        return groups\n      },\n      fieldsData() {\n        return this.groups.reduce((fields, group) => {\n          group.fields.reduce((fields, field) => {\n            fields.push(field)\n            return fields\n          }, fields)\n          return fields\n        }, [])\n      },\n      layout() {\n        const options = this.options\n        const layout = (options && options.layout) || LAYOUTS.STANDARD\n        return layout\n      },\n      formClass() {\n        const invalid = this.invalid\n        const valid = this.valid\n        const layout = this.layout\n        return {\n          'cube-form_standard': layout === LAYOUTS.STANDARD,\n          'cube-form_groups': this.groups.length > 1,\n          'cube-form_validating': this.validating,\n          'cube-form_pending': this.pending,\n          'cube-form_valid': valid,\n          'cube-form_invalid': invalid,\n          'cube-form_classic': layout === LAYOUTS.CLASSIC,\n          'cube-form_fresh': layout === LAYOUTS.FRESH\n        }\n      }\n    },\n    watch: {\n      validatedCount() {\n        this.$emit(EVENT_VALIDATE, {\n          validity: this.validity,\n          valid: this.valid,\n          invalid: this.invalid,\n          dirty: this.dirty,\n          firstInvalidFieldIndex: this.firstInvalidFieldIndex\n        })\n      }\n    },\n    beforeCreate() {\n      this.form = this\n      this.fields = []\n      this.validity = {}\n    },\n    mounted() {\n      if (this.immediateValidate) {\n        this.validate()\n      }\n    },\n    methods: {\n      submit(skipValidate = false) {\n        this.skipValidate = skipValidate\n        dispatchEvent(this.$refs.form, 'submit')\n        this.skipValidate = false\n      },\n      reset() {\n        dispatchEvent(this.$refs.form, 'reset')\n      },\n      submitHandler(e) {\n        // sync all fields value because of trigger: blur or debounce\n        this.syncValidatorValues()\n        if (this.skipValidate) {\n          this.$emit(EVENT_SUBMIT, e, this.model, this.fieldsModel)\n          return\n        }\n        const submited = (submitResult) => {\n          if (submitResult) {\n            this.$emit(EVENT_VALID, this.validity)\n            this.$emit(EVENT_SUBMIT, e, this.model, this.fieldsModel)\n          } else {\n            // scrollToInvalidField\n            if (this.options.scrollToInvalidField && this.firstInvalidField) {\n              this.firstInvalidField.$el.scrollIntoView()\n            }\n            e.preventDefault()\n            this.$emit(EVENT_INVALID, this.validity)\n          }\n        }\n        if (this.submitAlwaysValidate || this.valid === undefined) {\n          this._submit(submited)\n          if (this.validating || this.pending) {\n            // async validate\n            e.preventDefault()\n          }\n        } else {\n          submited(this.valid)\n        }\n      },\n      resetHandler(e) {\n        this._reset()\n        this.$emit(EVENT_RESET, e)\n      },\n      _submit(cb) {\n        this.validate(() => {\n          cb && cb(this.valid)\n        })\n      },\n      _reset() {\n        this.fields.forEach((fieldComponent) => {\n          fieldComponent.reset()\n        })\n        this.setValidity()\n        this.setValidating()\n        this.setPending()\n      },\n      syncValidatorValues() {\n        this.fields.forEach((fieldComponent) => {\n          fieldComponent.syncValidatorValue()\n        })\n      },\n      validate(cb) {\n        const promise = cb2PromiseWithResolve(cb)\n        if (promise) {\n          cb = promise.resolve\n        }\n        let doneCount = 0\n        const len = this.fields.length\n        this.originValid = undefined\n        this.fields.forEach((fieldComponent) => {\n          fieldComponent.validate(() => {\n            doneCount++\n            if (doneCount === len) {\n              // all done\n              cb && cb(this.valid)\n            }\n          })\n        })\n        return promise\n      },\n      updateValidating() {\n        const validating = this.fields.some((fieldComponent) => fieldComponent.validating)\n        this.setValidating(validating)\n      },\n      updatePending() {\n        const pending = this.fields.some((fieldComponent) => fieldComponent.pending)\n        this.setPending(pending)\n      },\n      setValidating(validating = false) {\n        this.validating = validating\n      },\n      setPending(pending = false) {\n        this.pending = pending\n      },\n      updateValidity(modelKey, valid, result, dirty) {\n        const curResult = this.validity[modelKey]\n        if (curResult && curResult.valid === valid && curResult.result === result && curResult.dirty === dirty) {\n          return\n        }\n        this.setValidity(modelKey, {\n          valid,\n          result,\n          dirty\n        })\n      },\n      setValidity(key, val) {\n        let validity = {}\n        if (key) {\n          Object.assign(validity, this.validity)\n          if (val === undefined) {\n            delete validity[key]\n          } else {\n            validity[key] = val\n          }\n        }\n\n        let dirty = false\n        let invalid = false\n        let valid = true\n        let firstInvalidFieldKey = ''\n        this.fields.forEach((fieldComponent) => {\n          const modelKey = fieldComponent.fieldValue.modelKey\n          if (modelKey) {\n            const retVal = validity[modelKey]\n            if (retVal) {\n              if (retVal.dirty) {\n                dirty = true\n              }\n              if (retVal.valid === false) {\n                valid = false\n              } else if (valid && !retVal.valid) {\n                valid = retVal.valid\n              }\n\n              if (!invalid && retVal.valid === false) {\n                // invalid\n                invalid = true\n                firstInvalidFieldKey = modelKey\n              }\n            } else if (fieldComponent.hasRules) {\n              if (valid) {\n                valid = undefined\n              }\n              validity[modelKey] = {\n                valid: undefined,\n                result: {},\n                dirty: false\n              }\n            }\n          }\n        })\n        this.validity = validity\n        this.dirty = dirty\n        this.originValid = valid\n        this.setFirstInvalid(firstInvalidFieldKey)\n        this.validatedCount++\n      },\n      setFirstInvalid(key) {\n        if (!key) {\n          this.firstInvalidField = null\n          this.firstInvalidFieldIndex = -1\n          return\n        }\n        this.fields.some((fieldComponent, index) => {\n          if (fieldComponent.fieldValue.modelKey === key) {\n            this.firstInvalidField = fieldComponent\n            this.firstInvalidFieldIndex = index\n            return true\n          }\n        })\n      },\n      addField(fieldComponent) {\n        const i = this.fieldsData.indexOf(fieldComponent.field)\n        this.fields.splice(i, 0, fieldComponent)\n        const modelKey = fieldComponent.fieldValue.modelKey\n        modelKey && this.setValidity(modelKey)\n      },\n      destroyField(fieldComponent) {\n        const i = this.fields.indexOf(fieldComponent)\n        this.fields.splice(i, 1)\n        const modelKey = fieldComponent.fieldValue.modelKey\n        modelKey && this.setValidity(modelKey)\n      }\n    },\n    beforeDestroy() {\n      this.form = null\n      this.firstInvalidField = null\n    },\n    components: {\n      CubeFormGroup\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  @require \"../../common/stylus/mixin.styl\"\n\n  .cube-form\n    position: relative\n    font-size: $fontsize-large\n    line-height: 1.429\n    color: $form-color\n    background-color: $form-bgc\n  .cube-form_groups\n    .cube-form-group-legend\n      padding: 10px 15px\n      &:empty\n        padding-top: 5px\n        padding-bottom: 5px\n  .cube-form_standard\n    .cube-form-item\n      min-height: 46px\n    .cube-form-field\n      flex: 1\n      font-size: $fontsize-medium\n    .cube-validator\n      display: flex\n      align-items: center\n      position: relative\n    .cube-validator_invalid\n      color: $form-invalid-color\n    .cube-validator-content\n      flex: 1\n    .cube-validator-msg-def\n      font-size: 0\n    .cube-validator_invalid\n      .cube-validator-msg\n        &::before\n          content: \"\\e614\"\n          padding-left: 5px\n          font-family: \"cube-icon\"!important\n          font-size: $fontsize-large-xx\n          font-style: normal\n          -webkit-font-smoothing: antialiased\n          -webkit-text-stroke-width: 0.2px\n          -moz-osx-font-smoothing: grayscale\n    .cube-form-label\n      width: 100px\n      padding-right: 10px\n    .cube-checkbox-group, .cube-radio-group\n      &::before, &::after\n        display: none\n    .cube-input\n      input\n        padding: 13px 0\n        background-color: transparent\n      &::after\n        display: none\n    .cube-textarea-wrapper\n      padding: 13px 0\n      height: 20px\n      &.cube-textarea_expanded\n        height: 60px\n        padding-bottom: 20px\n        .cube-textarea-indicator\n          bottom: 2px\n      .cube-textarea\n        padding: 0\n        background-color: transparent\n      &::after\n        display: none\n    .cube-select\n      padding-left: 0\n      background-color: transparent\n      &::after\n        display: none\n    .cube-upload-def\n      padding: 5px 0\n      .cube-upload-btn, .cube-upload-file\n        margin: 5px 10px 5px 0\n  .cube-form_classic\n    .cube-form-item\n      display: block\n      padding: 15px\n      &:last-child\n        padding-bottom: 30px\n      &::after\n        display: none\n      .cube-validator-msg\n        position: absolute\n        margin-top: 3px\n        &::before\n          display: none\n      .cube-validator-msg-def\n        font-size: $fontsize-small\n    .cube-form-item_btn\n      padding-top: 0\n      padding-bottom: 0\n      &:last-child\n        padding-bottom: 0\n    .cube-form-label\n      padding-bottom: 15px\n  .cube-form_fresh\n    .cube-form-item\n      display: block\n      padding: 2em 15px 10px\n      &::after\n        display: none\n      .cube-validator-msg\n        position: absolute\n        top: 1em\n        right: 15px\n        bottom: auto\n        margin-top: -.4em\n        font-size: $fontsize-small\n        &::before\n          display: none\n      .cube-validator-msg-def\n        font-size: 100%\n    .cube-form-item_btn\n      padding-top: 0\n      padding-bottom: 0\n      &:last-child\n        padding-bottom: 0\n    .cube-form-label\n      position: absolute\n      top: 1em\n      margin-top: -.4em\n      font-size: $fontsize-small\n</style>\n"],"mappings":";;;;;;;;;AAaA,SAAAA,aAAA;AACA,SAAAC,qBAAA;AACA,OAAAC,aAAA;AACA,OAAAC,OAAA;AACA,OAAAC,KAAA;AAEA,IAAAC,cAAA;AACA,IAAAC,YAAA;AACA,IAAAC,WAAA;AACA,IAAAC,cAAA;AACA,IAAAC,WAAA;AACA,IAAAC,aAAA;AAEA;EACAC,IAAA,EAAAN,cAAA;EACAO,MAAA,GAAAR,KAAA;EACAS,KAAA;IACAC,MAAA,EAAAC,MAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,MAAA;MAAA,oBAAAC,SAAA,EACA;QACA;QACA;MACA;IACA;IACAC,MAAA;MACAH,IAAA,EAAAC,MAAA;MAAA,oBAAAC,SAAA,EACA;QACA;QACA;MACA;IACA;IACAE,OAAA;MACAJ,IAAA,EAAAC,MAAA;MAAA,oBAAAC,SAAA,EACA;QACA;UACAG,oBAAA;UACAC,MAAA,EAAApB,OAAA,CAAAqB;QACA;MACA;IACA;IACAC,iBAAA;MACAR,IAAA,EAAAS,OAAA;MACA;IACA;IACAC,oBAAA;MACAV,IAAA,EAAAS,OAAA;MACA;IACA;EACA;EACAE,IAAA,WAAAA,KAAA;IACA;MACAC,cAAA;MACAC,KAAA;MACAC,iBAAA;MACAC,sBAAA;IACA;EACA;EACAC,QAAA;IACAC,WAAA,WAAAA,YAAA;MACA,IAAAlB,KAAA;MACA,KAAAmB,MAAA,CAAAC,OAAA,WAAAC,cAAA;QACA,KAAAA,cAAA,CAAAC,UAAA;UACAtB,KAAA,CAAAqB,cAAA,CAAAE,UAAA,CAAAC,QAAA,IAAAH,cAAA,CAAAI,UAAA;QACA;MACA;MACA,OAAAzB,KAAA;IACA;IACA0B,MAAA,WAAAA,OAAA;MACA,IAAAtB,MAAA,QAAAA,MAAA;MACA,IAAAsB,MAAA,GAAAtB,MAAA,CAAAsB,MAAA;MACA,IAAAtB,MAAA,CAAAe,MAAA;QACAO,MAAA,CAAAC,OAAA;UACAR,MAAA,EAAAf,MAAA,CAAAe;QACA;MACA;MACA,OAAAO,MAAA;IACA;IACAE,UAAA,WAAAA,WAAA;MACA,YAAAF,MAAA,CAAAG,MAAA,WAAAV,MAAA,EAAAW,KAAA;QACAA,KAAA,CAAAX,MAAA,CAAAU,MAAA,WAAAV,MAAA,EAAAY,KAAA;UACAZ,MAAA,CAAAa,IAAA,CAAAD,KAAA;UACA,OAAAZ,MAAA;QACA,GAAAA,MAAA;QACA,OAAAA,MAAA;MACA;IACA;IACAZ,MAAA,WAAAA,OAAA;MACA,IAAAF,OAAA,QAAAA,OAAA;MACA,IAAAE,MAAA,GAAAF,OAAA,IAAAA,OAAA,CAAAE,MAAA,IAAApB,OAAA,CAAAqB,QAAA;MACA,OAAAD,MAAA;IACA;IACA0B,SAAA,WAAAA,UAAA;MACA,IAAAC,OAAA,QAAAA,OAAA;MACA,IAAAC,KAAA,QAAAA,KAAA;MACA,IAAA5B,MAAA,QAAAA,MAAA;MACA;QACA,sBAAAA,MAAA,KAAApB,OAAA,CAAAqB,QAAA;QACA,yBAAAkB,MAAA,CAAAU,MAAA;QACA,6BAAAC,UAAA;QACA,0BAAAC,OAAA;QACA,mBAAAH,KAAA;QACA,qBAAAD,OAAA;QACA,qBAAA3B,MAAA,KAAApB,OAAA,CAAAoD,OAAA;QACA,mBAAAhC,MAAA,KAAApB,OAAA,CAAAqD;MACA;IACA;EACA;EACAC,KAAA;IACA5B,cAAA,WAAAA,eAAA;MACA,KAAA6B,KAAA,CAAAlD,cAAA;QACAmD,QAAA,OAAAA,QAAA;QACAR,KAAA,OAAAA,KAAA;QACAD,OAAA,OAAAA,OAAA;QACApB,KAAA,OAAAA,KAAA;QACAE,sBAAA,OAAAA;MACA;IACA;EACA;EACA4B,YAAA,WAAAA,aAAA;IACA,KAAAC,IAAA;IACA,KAAA1B,MAAA;IACA,KAAAwB,QAAA;EACA;EACAG,OAAA,WAAAA,QAAA;IACA,SAAArC,iBAAA;MACA,KAAAsC,QAAA;IACA;EACA;EACAC,OAAA;IACAC,MAAA,WAAAA,OAAA;MAAA,IAAAC,YAAA,GAAAC,SAAA,CAAAf,MAAA,QAAAe,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,KAAAD,YAAA,GAAAA,YAAA;MACAlE,aAAA,MAAAqE,KAAA,CAAAR,IAAA;MACA,KAAAK,YAAA;IACA;IACAI,KAAA,WAAAA,MAAA;MACAtE,aAAA,MAAAqE,KAAA,CAAAR,IAAA;IACA;IACAU,aAAA,WAAAA,cAAAC,CAAA;MAAA,IAAAC,KAAA;MACA;MACA,KAAAC,mBAAA;MACA,SAAAR,YAAA;QACA,KAAAR,KAAA,CAAApD,YAAA,EAAAkE,CAAA,OAAAxD,KAAA,OAAAkB,WAAA;QACA;MACA;MACA,IAAAyC,QAAA,YAAAA,SAAAC,YAAA;QACA,IAAAA,YAAA;UACAH,KAAA,CAAAf,KAAA,CAAAjD,WAAA,EAAAgE,KAAA,CAAAd,QAAA;UACAc,KAAA,CAAAf,KAAA,CAAApD,YAAA,EAAAkE,CAAA,EAAAC,KAAA,CAAAzD,KAAA,EAAAyD,KAAA,CAAAvC,WAAA;QACA;UACA;UACA,IAAAuC,KAAA,CAAApD,OAAA,CAAAC,oBAAA,IAAAmD,KAAA,CAAA1C,iBAAA;YACA0C,KAAA,CAAA1C,iBAAA,CAAA8C,GAAA,CAAAC,cAAA;UACA;UACAN,CAAA,CAAAO,cAAA;UACAN,KAAA,CAAAf,KAAA,CAAAhD,aAAA,EAAA+D,KAAA,CAAAd,QAAA;QACA;MACA;MACA,SAAAhC,oBAAA,SAAAwB,KAAA,KAAAiB,SAAA;QACA,KAAAY,OAAA,CAAAL,QAAA;QACA,SAAAtB,UAAA,SAAAC,OAAA;UACA;UACAkB,CAAA,CAAAO,cAAA;QACA;MACA;QACAJ,QAAA,MAAAxB,KAAA;MACA;IACA;IACA8B,YAAA,WAAAA,aAAAT,CAAA;MACA,KAAAU,MAAA;MACA,KAAAxB,KAAA,CAAAnD,WAAA,EAAAiE,CAAA;IACA;IACAQ,OAAA,WAAAA,QAAAG,EAAA;MAAA,IAAAC,MAAA;MACA,KAAArB,QAAA;QACAoB,EAAA,IAAAA,EAAA,CAAAC,MAAA,CAAAjC,KAAA;MACA;IACA;IACA+B,MAAA,WAAAA,OAAA;MACA,KAAA/C,MAAA,CAAAC,OAAA,WAAAC,cAAA;QACAA,cAAA,CAAAiC,KAAA;MACA;MACA,KAAAe,WAAA;MACA,KAAAC,aAAA;MACA,KAAAC,UAAA;IACA;IACAb,mBAAA,WAAAA,oBAAA;MACA,KAAAvC,MAAA,CAAAC,OAAA,WAAAC,cAAA;QACAA,cAAA,CAAAmD,kBAAA;MACA;IACA;IACAzB,QAAA,WAAAA,SAAAoB,EAAA;MAAA,IAAAM,MAAA;MACA,IAAAC,OAAA,GAAAzF,qBAAA,CAAAkF,EAAA;MACA,IAAAO,OAAA;QACAP,EAAA,GAAAO,OAAA,CAAAC,OAAA;MACA;MACA,IAAAC,SAAA;MACA,IAAAC,GAAA,QAAA1D,MAAA,CAAAiB,MAAA;MACA,KAAA0C,WAAA,GAAA1B,SAAA;MACA,KAAAjC,MAAA,CAAAC,OAAA,WAAAC,cAAA;QACAA,cAAA,CAAA0B,QAAA;UACA6B,SAAA;UACA,IAAAA,SAAA,KAAAC,GAAA;YACA;YACAV,EAAA,IAAAA,EAAA,CAAAM,MAAA,CAAAtC,KAAA;UACA;QACA;MACA;MACA,OAAAuC,OAAA;IACA;IACAK,gBAAA,WAAAA,iBAAA;MACA,IAAA1C,UAAA,QAAAlB,MAAA,CAAA6D,IAAA,WAAA3D,cAAA;QAAA,OAAAA,cAAA,CAAAgB,UAAA;MAAA;MACA,KAAAiC,aAAA,CAAAjC,UAAA;IACA;IACA4C,aAAA,WAAAA,cAAA;MACA,IAAA3C,OAAA,QAAAnB,MAAA,CAAA6D,IAAA,WAAA3D,cAAA;QAAA,OAAAA,cAAA,CAAAiB,OAAA;MAAA;MACA,KAAAiC,UAAA,CAAAjC,OAAA;IACA;IACAgC,aAAA,WAAAA,cAAA;MAAA,IAAAjC,UAAA,GAAAc,SAAA,CAAAf,MAAA,QAAAe,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,KAAAd,UAAA,GAAAA,UAAA;IACA;IACAkC,UAAA,WAAAA,WAAA;MAAA,IAAAjC,OAAA,GAAAa,SAAA,CAAAf,MAAA,QAAAe,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,KAAAb,OAAA,GAAAA,OAAA;IACA;IACA4C,cAAA,WAAAA,eAAA1D,QAAA,EAAAW,KAAA,EAAAgD,MAAA,EAAArE,KAAA;MACA,IAAAsE,SAAA,QAAAzC,QAAA,CAAAnB,QAAA;MACA,IAAA4D,SAAA,IAAAA,SAAA,CAAAjD,KAAA,KAAAA,KAAA,IAAAiD,SAAA,CAAAD,MAAA,KAAAA,MAAA,IAAAC,SAAA,CAAAtE,KAAA,KAAAA,KAAA;QACA;MACA;MACA,KAAAuD,WAAA,CAAA7C,QAAA;QACAW,KAAA,EAAAA,KAAA;QACAgD,MAAA,EAAAA,MAAA;QACArE,KAAA,EAAAA;MACA;IACA;IACAuD,WAAA,WAAAA,YAAAgB,GAAA,EAAAC,GAAA;MACA,IAAA3C,QAAA;MACA,IAAA0C,GAAA;QACAnF,MAAA,CAAAqF,MAAA,CAAA5C,QAAA,OAAAA,QAAA;QACA,IAAA2C,GAAA,KAAAlC,SAAA;UACA,OAAAT,QAAA,CAAA0C,GAAA;QACA;UACA1C,QAAA,CAAA0C,GAAA,IAAAC,GAAA;QACA;MACA;MAEA,IAAAxE,KAAA;MACA,IAAAoB,OAAA;MACA,IAAAC,KAAA;MACA,IAAAqD,oBAAA;MACA,KAAArE,MAAA,CAAAC,OAAA,WAAAC,cAAA;QACA,IAAAG,QAAA,GAAAH,cAAA,CAAAE,UAAA,CAAAC,QAAA;QACA,IAAAA,QAAA;UACA,IAAAiE,MAAA,GAAA9C,QAAA,CAAAnB,QAAA;UACA,IAAAiE,MAAA;YACA,IAAAA,MAAA,CAAA3E,KAAA;cACAA,KAAA;YACA;YACA,IAAA2E,MAAA,CAAAtD,KAAA;cACAA,KAAA;YACA,WAAAA,KAAA,KAAAsD,MAAA,CAAAtD,KAAA;cACAA,KAAA,GAAAsD,MAAA,CAAAtD,KAAA;YACA;YAEA,KAAAD,OAAA,IAAAuD,MAAA,CAAAtD,KAAA;cACA;cACAD,OAAA;cACAsD,oBAAA,GAAAhE,QAAA;YACA;UACA,WAAAH,cAAA,CAAAqE,QAAA;YACA,IAAAvD,KAAA;cACAA,KAAA,GAAAiB,SAAA;YACA;YACAT,QAAA,CAAAnB,QAAA;cACAW,KAAA,EAAAiB,SAAA;cACA+B,MAAA;cACArE,KAAA;YACA;UACA;QACA;MACA;MACA,KAAA6B,QAAA,GAAAA,QAAA;MACA,KAAA7B,KAAA,GAAAA,KAAA;MACA,KAAAgE,WAAA,GAAA3C,KAAA;MACA,KAAAwD,eAAA,CAAAH,oBAAA;MACA,KAAA3E,cAAA;IACA;IACA8E,eAAA,WAAAA,gBAAAN,GAAA;MAAA,IAAAO,MAAA;MACA,KAAAP,GAAA;QACA,KAAAtE,iBAAA;QACA,KAAAC,sBAAA;QACA;MACA;MACA,KAAAG,MAAA,CAAA6D,IAAA,WAAA3D,cAAA,EAAAwE,KAAA;QACA,IAAAxE,cAAA,CAAAE,UAAA,CAAAC,QAAA,KAAA6D,GAAA;UACAO,MAAA,CAAA7E,iBAAA,GAAAM,cAAA;UACAuE,MAAA,CAAA5E,sBAAA,GAAA6E,KAAA;UACA;QACA;MACA;IACA;IACAC,QAAA,WAAAA,SAAAzE,cAAA;MACA,IAAA0E,CAAA,QAAAnE,UAAA,CAAAoE,OAAA,CAAA3E,cAAA,CAAAU,KAAA;MACA,KAAAZ,MAAA,CAAA8E,MAAA,CAAAF,CAAA,KAAA1E,cAAA;MACA,IAAAG,QAAA,GAAAH,cAAA,CAAAE,UAAA,CAAAC,QAAA;MACAA,QAAA,SAAA6C,WAAA,CAAA7C,QAAA;IACA;IACA0E,YAAA,WAAAA,aAAA7E,cAAA;MACA,IAAA0E,CAAA,QAAA5E,MAAA,CAAA6E,OAAA,CAAA3E,cAAA;MACA,KAAAF,MAAA,CAAA8E,MAAA,CAAAF,CAAA;MACA,IAAAvE,QAAA,GAAAH,cAAA,CAAAE,UAAA,CAAAC,QAAA;MACAA,QAAA,SAAA6C,WAAA,CAAA7C,QAAA;IACA;EACA;EACA2E,aAAA,WAAAA,cAAA;IACA,KAAAtD,IAAA;IACA,KAAA9B,iBAAA;EACA;EACAqF,UAAA;IACAlH,aAAA,EAAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}