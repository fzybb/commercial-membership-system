{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nvar DAY_TIMESTAMP = 60 * 60 * 24 * 1000;\nvar HOUR_TIMESTAMP = 60 * 60 * 1000;\nvar MINUTE_TIMESTAMP = 60 * 1000;\nfunction formatType(type, format, value, regExpAttributes) {\n  var regExpMap = {\n    year: '(Y+)',\n    month: '(M+)',\n    date: '(D+)',\n    hour: '(h+)',\n    minute: '(m+)',\n    second: '(s+)',\n    quarter: '(q+)',\n    millisecond: '(S)'\n  };\n  if (new RegExp(regExpMap[type], regExpAttributes).test(format)) {\n    var replaceStr = type === 'year' ? value.toString().substr(4 - RegExp.$1.length) : RegExp.$1.length === 1 ? value : pad(value);\n    format = format.replace(RegExp.$1, replaceStr);\n  }\n  return format;\n}\nfunction pad(value) {\n  return ('00' + value).substr(('' + value).length);\n}\nfunction formatDate(date, format) {\n  var map = {\n    year: {\n      value: date.getFullYear(),\n      regExpAttributes: 'i'\n    },\n    month: {\n      value: date.getMonth() + 1\n    },\n    date: {\n      value: date.getDate(),\n      regExpAttributes: 'i'\n    },\n    hour: {\n      value: date.getHours(),\n      regExpAttributes: 'i'\n    },\n    minute: {\n      value: date.getMinutes()\n    },\n    second: {\n      value: date.getSeconds()\n    },\n    quarter: {\n      value: Math.floor((date.getMonth() + 3) / 3),\n      regExpAttributes: 'i'\n    },\n    millisecond: {\n      value: date.getMilliseconds()\n    }\n  };\n  for (var key in map) {\n    format = formatType(key, format, map[key].value, map[key].regExpAttributes);\n  }\n  return format;\n}\nfunction getZeroStamp(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return +new Date(year + '/' + month + '/' + day + ' 00:00:00');\n}\nfunction getDayDiff(date1, date2) {\n  return Math.floor((getZeroStamp(date1) - getZeroStamp(date2)) / DAY_TIMESTAMP);\n}\nfunction getNow() {\n  return window.performance && window.performance.now ? window.performance.now() + window.performance.timing.navigationStart : +new Date();\n}\nfunction computeNatureMaxDay(month, year) {\n  var natureMaxDay = 30;\n  if ([1, 3, 5, 7, 8, 10, 12].indexOf(month) > -1) {\n    natureMaxDay = 31;\n  } else {\n    if (month === 2) {\n      natureMaxDay = !year || !(year % 400) || !(year % 4) && year % 100 ? 29 : 28;\n    }\n  }\n  return natureMaxDay;\n}\nexport { DAY_TIMESTAMP, HOUR_TIMESTAMP, MINUTE_TIMESTAMP, pad, formatType, formatDate, getZeroStamp, getDayDiff, getNow, computeNatureMaxDay };","map":{"version":3,"names":["DAY_TIMESTAMP","HOUR_TIMESTAMP","MINUTE_TIMESTAMP","formatType","type","format","value","regExpAttributes","regExpMap","year","month","date","hour","minute","second","quarter","millisecond","RegExp","test","replaceStr","toString","substr","$1","length","pad","replace","formatDate","map","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","key","getZeroStamp","day","Date","getDayDiff","date1","date2","getNow","window","performance","now","timing","navigationStart","computeNatureMaxDay","natureMaxDay","indexOf"],"sources":["C:/Users/fu_71/OneDrive/Desktop/fitness/frontend/node_modules/cube-ui/src/common/lang/date.js"],"sourcesContent":["const DAY_TIMESTAMP = 60 * 60 * 24 * 1000\nconst HOUR_TIMESTAMP = 60 * 60 * 1000\nconst MINUTE_TIMESTAMP = 60 * 1000\n\nfunction formatType(type, format, value, regExpAttributes) {\n  const regExpMap = {\n    year: '(Y+)',\n    month: '(M+)',\n    date: '(D+)',\n    hour: '(h+)',\n    minute: '(m+)',\n    second: '(s+)',\n    quarter: '(q+)',\n    millisecond: '(S)'\n  }\n\n  if (new RegExp(regExpMap[type], regExpAttributes).test(format)) {\n    const replaceStr = type === 'year'\n      ? value.toString().substr(4 - RegExp.$1.length)\n      : (RegExp.$1.length === 1)\n        ? value\n        : pad(value)\n    format = format.replace(RegExp.$1, replaceStr)\n  }\n\n  return format\n}\n\nfunction pad(value) {\n  return ('00' + value).substr(('' + value).length)\n}\n\nfunction formatDate(date, format) {\n  const map = {\n    year: {\n      value: date.getFullYear(),\n      regExpAttributes: 'i'\n    },\n    month: {\n      value: date.getMonth() + 1\n    },\n    date: {\n      value: date.getDate(),\n      regExpAttributes: 'i'\n    },\n    hour: {\n      value: date.getHours(),\n      regExpAttributes: 'i'\n    },\n    minute: {\n      value: date.getMinutes()\n    },\n    second: {\n      value: date.getSeconds()\n    },\n    quarter: {\n      value: Math.floor((date.getMonth() + 3) / 3),\n      regExpAttributes: 'i'\n    },\n    millisecond: {\n      value: date.getMilliseconds()\n    }\n  }\n\n  for (const key in map) {\n    format = formatType(key, format, map[key].value, map[key].regExpAttributes)\n  }\n\n  return format\n}\n\nfunction getZeroStamp(date) {\n  const year = date.getFullYear()\n  const month = date.getMonth() + 1\n  const day = date.getDate()\n  return +new Date(year + '/' + month + '/' + day + ' 00:00:00')\n}\n\nfunction getDayDiff(date1, date2) {\n  return Math.floor((getZeroStamp(date1) - getZeroStamp(date2)) / DAY_TIMESTAMP)\n}\n\nfunction getNow() {\n  return window.performance && window.performance.now ? (window.performance.now() + window.performance.timing.navigationStart) : +new Date()\n}\n\nfunction computeNatureMaxDay(month, year) {\n  let natureMaxDay = 30\n  if ([1, 3, 5, 7, 8, 10, 12].indexOf(month) > -1) {\n    natureMaxDay = 31\n  } else {\n    if (month === 2) {\n      natureMaxDay = !year || (!(year % 400) || (!(year % 4) && year % 100)) ? 29 : 28\n    }\n  }\n\n  return natureMaxDay\n}\n\nexport {\n  DAY_TIMESTAMP,\n  HOUR_TIMESTAMP,\n  MINUTE_TIMESTAMP,\n  pad,\n  formatType,\n  formatDate,\n  getZeroStamp,\n  getDayDiff,\n  getNow,\n  computeNatureMaxDay\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}