{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/fu_71/OneDrive/Desktop/fitness/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/fu_71/OneDrive/Desktop/fitness/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport BScroll from 'better-scroll';\nimport Loading from '../loading/loading.vue';\nimport Bubble from '../bubble/bubble.vue';\nimport scrollMixin from '../../common/mixins/scroll';\nimport deprecatedMixin from '../../common/mixins/deprecated';\nimport { getRect } from '../../common/helpers/dom';\nimport { camelize } from '../../common/lang/string';\nimport { USE_TRANSITION } from '../../common/bscroll/constants';\nvar COMPONENT_NAME = 'cube-scroll';\nvar DIRECTION_H = 'horizontal';\nvar DIRECTION_V = 'vertical';\nvar DEFAULT_REFRESH_TXT = 'Refresh success';\nvar DEFAULT_STOP_TIME = 600;\nvar EVENT_CLICK = 'click';\nvar EVENT_PULLING_DOWN = 'pulling-down';\nvar EVENT_PULLING_UP = 'pulling-up';\nvar EVENT_SCROLL = 'scroll';\nvar EVENT_BEFORE_SCROLL_START = 'before-scroll-start';\nvar EVENT_SCROLL_END = 'scroll-end';\nvar NEST_MODE_NONE = 'none';\nvar NEST_MODE_NATIVE = 'native';\nvar SCROLL_EVENTS = [EVENT_SCROLL, EVENT_BEFORE_SCROLL_START, EVENT_SCROLL_END];\nvar DEFAULT_OPTIONS = {\n  observeDOM: true,\n  click: true,\n  probeType: 1,\n  scrollbar: false,\n  pullDownRefresh: false,\n  pullUpLoad: false\n};\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [scrollMixin, deprecatedMixin],\n  provide: function provide() {\n    return {\n      parentScroll: this\n    };\n  },\n  inject: {\n    parentScroll: {\n      \"default\": null\n    }\n  },\n  props: {\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    scrollEvents: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      },\n      validator: function validator(arr) {\n        return arr.every(function (item) {\n          return SCROLL_EVENTS.indexOf(item) !== -1;\n        });\n      }\n    },\n    // TODO: plan to remove at 1.10.0\n    listenScroll: {\n      type: Boolean,\n      \"default\": undefined,\n      deprecated: {\n        replacedBy: 'scroll-events'\n      }\n    },\n    listenBeforeScroll: {\n      type: Boolean,\n      \"default\": undefined,\n      deprecated: {\n        replacedBy: 'scroll-events'\n      }\n    },\n    direction: {\n      type: String,\n      \"default\": DIRECTION_V\n    },\n    refreshDelay: {\n      type: Number,\n      \"default\": 20\n    },\n    nestMode: {\n      type: String,\n      \"default\": NEST_MODE_NONE\n    }\n  },\n  data: function data() {\n    return {\n      beforePullDown: true,\n      isPullingDown: false,\n      isPullUpLoad: false,\n      pullUpNoMore: false,\n      bubbleY: 0,\n      pullDownStyle: '',\n      pullDownStop: 40,\n      pullDownHeight: 60,\n      pullUpHeight: 0\n    };\n  },\n  computed: {\n    pullDownRefresh: function pullDownRefresh() {\n      var pullDownRefresh = this.options.pullDownRefresh;\n      if (!pullDownRefresh) {\n        return pullDownRefresh;\n      }\n      if (pullDownRefresh === true) {\n        pullDownRefresh = {};\n      }\n      return Object.assign({\n        stop: this.pullDownStop\n      }, pullDownRefresh);\n    },\n    pullUpLoad: function pullUpLoad() {\n      return this.options.pullUpLoad;\n    },\n    pullUpTxt: function pullUpTxt() {\n      var pullUpLoad = this.pullUpLoad;\n      var txt = pullUpLoad && pullUpLoad.txt;\n      var moreTxt = txt && txt.more || '';\n      var noMoreTxt = txt && txt.noMore || '';\n      return this.pullUpNoMore ? noMoreTxt : moreTxt;\n    },\n    refreshTxt: function refreshTxt() {\n      var pullDownRefresh = this.pullDownRefresh;\n      return pullDownRefresh && pullDownRefresh.txt || DEFAULT_REFRESH_TXT;\n    },\n    finalScrollEvents: function finalScrollEvents() {\n      var finalScrollEvents = this.scrollEvents.slice();\n      if (!finalScrollEvents.length) {\n        this.listenScroll && finalScrollEvents.push(EVENT_SCROLL);\n        this.listenBeforeScroll && finalScrollEvents.push(EVENT_BEFORE_SCROLL_START);\n      }\n      return finalScrollEvents;\n    },\n    needListenScroll: function needListenScroll() {\n      return this.finalScrollEvents.indexOf(EVENT_SCROLL) !== -1 || this.parentScroll;\n    }\n  },\n  watch: {\n    data: function data() {\n      var _this = this;\n      setTimeout(function () {\n        _this.forceUpdate(true);\n      }, this.refreshDelay);\n    },\n    pullDownRefresh: {\n      handler: function handler(newVal, oldVal) {\n        if (newVal) {\n          this.scroll.openPullDown(newVal);\n          if (!oldVal) {\n            this._onPullDownRefresh();\n            this._pullDownRefreshChangeHandler();\n          }\n        }\n        if (!newVal && oldVal) {\n          this.scroll.closePullDown();\n          this._offPullDownRefresh();\n          this._pullDownRefreshChangeHandler();\n        }\n      },\n      deep: true\n    },\n    pullUpLoad: {\n      handler: function handler(newVal, oldVal) {\n        if (newVal) {\n          this.scroll.openPullUp(newVal);\n          if (!oldVal) {\n            this._onPullUpLoad();\n            this._pullUpLoadChangeHandler();\n          }\n        }\n        if (!newVal && oldVal) {\n          this.scroll.closePullUp();\n          this._offPullUpLoad();\n          this._pullUpLoadChangeHandler();\n        }\n      },\n      deep: true\n    }\n  },\n  activated: function activated() {\n    /* istanbul ignore next */\n    this.enable();\n  },\n  deactivated: function deactivated() {\n    /* istanbul ignore next */\n    this.disable();\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n    this.$nextTick(function () {\n      _this2.initScroll();\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.destroy();\n  },\n  methods: {\n    initScroll: function initScroll() {\n      if (!this.$refs.wrapper) {\n        return;\n      }\n      this._calculateMinHeight();\n      var dynamicOptions = {\n        scrollY: this.direction === DIRECTION_V,\n        scrollX: this.direction === DIRECTION_H,\n        probeType: this.needListenScroll ? 3 : 1,\n        useTransition: USE_TRANSITION\n      };\n      var options = Object.assign({}, DEFAULT_OPTIONS, dynamicOptions, this.options);\n      this.scroll = new BScroll(this.$refs.wrapper, options);\n      this.parentScroll && this.nestMode !== NEST_MODE_NONE && this._handleNestScroll();\n      this._listenScrollEvents();\n      if (this.pullDownRefresh) {\n        this._onPullDownRefresh();\n        this._pullDownRefreshChangeHandler();\n      }\n      if (this.pullUpLoad) {\n        this._onPullUpLoad();\n        this._pullUpLoadChangeHandler();\n      }\n    },\n    disable: function disable() {\n      this.scroll && this.scroll.disable();\n    },\n    enable: function enable() {\n      this.scroll && this.scroll.enable();\n    },\n    refresh: function refresh() {\n      this._calculateMinHeight();\n      this.scroll && this.scroll.refresh();\n    },\n    destroy: function destroy() {\n      this.scroll && this.scroll.destroy();\n      this.scroll = null;\n    },\n    scrollTo: function scrollTo() {\n      this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments);\n    },\n    scrollToElement: function scrollToElement() {\n      this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments);\n    },\n    clickItem: function clickItem(item) {\n      this.$emit(EVENT_CLICK, item);\n    },\n    forceUpdate: function forceUpdate() {\n      var _arguments = arguments,\n        _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var dirty, nomore;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              dirty = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : false;\n              nomore = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : false;\n              if (!_this3.isPullDownUpdating) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 4:\n              if (!(_this3.pullDownRefresh && _this3.isPullingDown)) {\n                _context.next = 14;\n                break;\n              }\n              _this3.isPullingDown = false;\n              _this3.isPullDownUpdating = true;\n              _context.next = 9;\n              return _this3._waitFinishPullDown();\n            case 9:\n              _this3.isPullDownUpdating = false;\n              _context.next = 12;\n              return _this3._waitResetPullDown(dirty);\n            case 12:\n              _context.next = 15;\n              break;\n            case 14:\n              if (_this3.pullUpLoad && _this3.isPullUpLoad) {\n                _this3.isPullUpLoad = false;\n                _this3.scroll.finishPullUp();\n                _this3.pullUpNoMore = !dirty || nomore;\n              }\n            case 15:\n              dirty && _this3.refresh();\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    resetPullUpTxt: function resetPullUpTxt() {\n      this.pullUpNoMore = false;\n    },\n    _listenScrollEvents: function _listenScrollEvents() {\n      var _this4 = this;\n      this.finalScrollEvents.forEach(function (event) {\n        _this4.scroll.on(camelize(event), function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          _this4.$emit.apply(_this4, [event].concat(args));\n        });\n      });\n    },\n    _handleNestScroll: function _handleNestScroll() {\n      var _this5 = this;\n      // waiting scroll initial\n      this.$nextTick(function () {\n        var innerScroll = _this5.scroll;\n        var outerScroll = _this5.parentScroll.scroll;\n        var scrolls = [innerScroll, outerScroll];\n        scrolls.forEach(function (scroll, index, arr) {\n          // scroll ended always enable them\n          scroll.on('touchEnd', function () {\n            outerScroll.enable();\n            innerScroll.enable();\n            // when inner scroll reaching boundary, we will disable inner scroll, so when 'touchend' event fire,\n            // the inner scroll will not reset initiated within '_end' method in better-scroll.\n            // then lead to inner and outer scrolls together when we touch and move on the outer scroll element,\n            // so here we reset inner scroll's 'initiated' manually.\n            innerScroll.initiated = false;\n          });\n          scroll.on('beforeScrollStart', function () {\n            _this5.touchStartMoment = true;\n            var anotherScroll = arr[(index + 1) % 2];\n            anotherScroll.stop();\n            anotherScroll.resetPosition();\n          });\n        });\n        innerScroll.on('scroll', function (pos) {\n          // if scroll event triggered not by touch event, such as by 'scrollTo' method\n          if (!innerScroll.initiated || innerScroll.isInTransition) {\n            return;\n          }\n          if (_this5.nestMode === NEST_MODE_NATIVE && !_this5.touchStartMoment) {\n            return;\n          }\n          var reachBoundary = _this5._checkReachBoundary(pos);\n          if (reachBoundary) {\n            innerScroll.resetPosition();\n            innerScroll.disable();\n            // Prevent outer scroll have a bouncing step when enabled in 'free' nestMode.\n            outerScroll.pointX = innerScroll.pointX;\n            outerScroll.pointY = innerScroll.pointY;\n            outerScroll.enable();\n          } else {\n            outerScroll.disable();\n          }\n          _this5.touchStartMoment = false;\n        });\n      });\n    },\n    _checkReachBoundary: function _checkReachBoundary(pos) {\n      var distX = this.scroll.distX;\n      var distY = this.scroll.distY;\n      var reachBoundaryX = distX > 0 ? pos.x >= this.scroll.minScrollX : distX < 0 ? pos.x <= this.scroll.maxScrollX : false;\n      var reachBoundaryY = distY > 0 ? pos.y >= this.scroll.minScrollY : distY < 0 ? pos.y <= this.scroll.maxScrollY : false;\n      var freeScroll = this.scroll.freeScroll;\n      var hasHorizontalScroll = this.scroll.hasHorizontalScroll;\n      var hasVerticalScroll = this.scroll.hasVerticalScroll;\n      if (!hasHorizontalScroll && !hasVerticalScroll) {\n        return true;\n      }\n      if (freeScroll) {\n        return reachBoundaryX || reachBoundaryY;\n      }\n      var reachBoundary;\n      if (this.scroll.movingDirectionX) {\n        reachBoundary = reachBoundaryX;\n      } else if (this.scroll.movingDirectionY) {\n        reachBoundary = reachBoundaryY;\n      }\n      return reachBoundary;\n    },\n    _calculateMinHeight: function _calculateMinHeight() {\n      var _this$$refs = this.$refs,\n        wrapper = _this$$refs.wrapper,\n        listWrapper = _this$$refs.listWrapper;\n      var pullUpLoad = this.pullUpLoad;\n      var pullDownRefresh = this.pullDownRefresh;\n      var minHeight = 0;\n      if (pullDownRefresh || pullUpLoad) {\n        var wrapperHeight = getRect(wrapper).height;\n        minHeight = wrapperHeight + 1;\n        if (pullUpLoad && pullUpLoad.visible) {\n          // minHeight = wrapperHeight + 1 - pullUpHeight, then pullUpLoad text is visible\n          // when content's height is not larger than wrapper height\n          minHeight -= this.pullUpHeight;\n        }\n      }\n      listWrapper.style.minHeight = \"\".concat(minHeight, \"px\");\n    },\n    _onPullDownRefresh: function _onPullDownRefresh() {\n      this.scroll.on('pullingDown', this._pullDownHandle);\n      this.scroll.on('scroll', this._pullDownScrollHandle);\n    },\n    _offPullDownRefresh: function _offPullDownRefresh() {\n      this.scroll.off('pullingDown', this._pullDownHandle);\n      this.scroll.off('scroll', this._pullDownScrollHandle);\n    },\n    _pullDownRefreshChangeHandler: function _pullDownRefreshChangeHandler() {\n      var _this6 = this;\n      this.$nextTick(function () {\n        _this6._getPullDownEleHeight();\n        _this6._calculateMinHeight();\n      });\n    },\n    _pullDownHandle: function _pullDownHandle() {\n      if (this.resetPullDownTimer) {\n        clearTimeout(this.resetPullDownTimer);\n      }\n      this.beforePullDown = false;\n      this.isPullingDown = true;\n      this.$emit(EVENT_PULLING_DOWN);\n    },\n    _pullDownScrollHandle: function _pullDownScrollHandle(pos) {\n      if (this.beforePullDown) {\n        this.bubbleY = Math.max(0, pos.y - this.pullDownHeight);\n        this.pullDownStyle = \"top:\".concat(Math.min(pos.y - this.pullDownHeight, 0), \"px\");\n      } else {\n        this.bubbleY = 0;\n        this.pullDownStyle = \"top:\".concat(Math.min(pos.y - this.pullDownStop, 0), \"px\");\n      }\n    },\n    _pullUpLoadChangeHandler: function _pullUpLoadChangeHandler() {\n      var _this7 = this;\n      this.$nextTick(function () {\n        _this7._getPullUpEleHeight();\n        _this7._calculateMinHeight();\n      });\n    },\n    _onPullUpLoad: function _onPullUpLoad() {\n      this.scroll.on('pullingUp', this._pullUpHandle);\n    },\n    _offPullUpLoad: function _offPullUpLoad() {\n      this.scroll.off('pullingUp', this._pullUpHandle);\n    },\n    _pullUpHandle: function _pullUpHandle() {\n      this.isPullUpLoad = true;\n      this.$emit(EVENT_PULLING_UP);\n    },\n    _waitFinishPullDown: function _waitFinishPullDown(next) {\n      var _this8 = this;\n      var _this$pullDownRefresh = this.pullDownRefresh.stopTime,\n        stopTime = _this$pullDownRefresh === void 0 ? DEFAULT_STOP_TIME : _this$pullDownRefresh;\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          _this8.scroll.finishPullDown();\n          resolve();\n        }, stopTime);\n      });\n    },\n    _waitResetPullDown: function _waitResetPullDown(dirty) {\n      var _this9 = this;\n      return new Promise(function (resolve) {\n        _this9.resetPullDownTimer = setTimeout(function () {\n          _this9.pullDownStyle = \"top: -\".concat(_this9.pullDownHeight, \"px\");\n          _this9.beforePullDown = true;\n          resolve();\n        }, _this9.scroll.options.bounceTime);\n      });\n    },\n    _getPullDownEleHeight: function _getPullDownEleHeight() {\n      var _this10 = this;\n      var pulldown = this.$refs.pulldown;\n      if (!pulldown) {\n        return;\n      }\n      pulldown = pulldown.firstChild;\n      this.pullDownHeight = getRect(pulldown).height;\n      this.beforePullDown = false;\n      this.isPullingDown = true;\n      this.$nextTick(function () {\n        _this10.pullDownStop = getRect(pulldown).height;\n        _this10.beforePullDown = true;\n        _this10.isPullingDown = false;\n      });\n    },\n    _getPullUpEleHeight: function _getPullUpEleHeight() {\n      var listWrapper = this.$refs.listWrapper;\n      var pullup = listWrapper.nextElementSibling;\n      if (!pullup) {\n        this.pullUpHeight = 0;\n        return;\n      }\n      this.pullUpHeight = getRect(pullup).height;\n    }\n  },\n  components: {\n    Loading: Loading,\n    Bubble: Bubble\n  }\n};","map":{"version":3,"names":["BScroll","Loading","Bubble","scrollMixin","deprecatedMixin","getRect","camelize","USE_TRANSITION","COMPONENT_NAME","DIRECTION_H","DIRECTION_V","DEFAULT_REFRESH_TXT","DEFAULT_STOP_TIME","EVENT_CLICK","EVENT_PULLING_DOWN","EVENT_PULLING_UP","EVENT_SCROLL","EVENT_BEFORE_SCROLL_START","EVENT_SCROLL_END","NEST_MODE_NONE","NEST_MODE_NATIVE","SCROLL_EVENTS","DEFAULT_OPTIONS","observeDOM","click","probeType","scrollbar","pullDownRefresh","pullUpLoad","name","mixins","provide","parentScroll","inject","props","data","type","Array","_default","scrollEvents","validator","arr","every","item","indexOf","listenScroll","Boolean","undefined","deprecated","replacedBy","listenBeforeScroll","direction","String","refreshDelay","Number","nestMode","beforePullDown","isPullingDown","isPullUpLoad","pullUpNoMore","bubbleY","pullDownStyle","pullDownStop","pullDownHeight","pullUpHeight","computed","options","Object","assign","stop","pullUpTxt","txt","moreTxt","more","noMoreTxt","noMore","refreshTxt","finalScrollEvents","slice","length","push","needListenScroll","watch","_this","setTimeout","forceUpdate","handler","newVal","oldVal","scroll","openPullDown","_onPullDownRefresh","_pullDownRefreshChangeHandler","closePullDown","_offPullDownRefresh","deep","openPullUp","_onPullUpLoad","_pullUpLoadChangeHandler","closePullUp","_offPullUpLoad","activated","enable","deactivated","disable","mounted","_this2","$nextTick","initScroll","beforeDestroy","destroy","methods","$refs","wrapper","_calculateMinHeight","dynamicOptions","scrollY","scrollX","useTransition","_handleNestScroll","_listenScrollEvents","refresh","scrollTo","apply","arguments","scrollToElement","clickItem","$emit","_arguments","_this3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dirty","nomore","wrap","_callee$","_context","prev","next","isPullDownUpdating","abrupt","_waitFinishPullDown","_waitResetPullDown","finishPullUp","resetPullUpTxt","_this4","forEach","event","on","_len","args","_key","concat","_this5","innerScroll","outerScroll","scrolls","index","initiated","touchStartMoment","anotherScroll","resetPosition","pos","isInTransition","reachBoundary","_checkReachBoundary","pointX","pointY","distX","distY","reachBoundaryX","x","minScrollX","maxScrollX","reachBoundaryY","y","minScrollY","maxScrollY","freeScroll","hasHorizontalScroll","hasVerticalScroll","movingDirectionX","movingDirectionY","_this$$refs","listWrapper","minHeight","wrapperHeight","height","visible","style","_pullDownHandle","_pullDownScrollHandle","off","_this6","_getPullDownEleHeight","resetPullDownTimer","clearTimeout","Math","max","min","_this7","_getPullUpEleHeight","_pullUpHandle","_this8","_this$pullDownRefresh","stopTime","Promise","resolve","finishPullDown","_this9","bounceTime","_this10","pulldown","firstChild","pullup","nextElementSibling","components"],"sources":["node_modules/cube-ui/src/components/scroll/scroll.vue"],"sourcesContent":["<template>\n  <div ref=\"wrapper\" class=\"cube-scroll-wrapper\">\n    <div class=\"cube-scroll-content\">\n      <div ref=\"listWrapper\" class=\"cube-scroll-list-wrapper\">\n        <slot>\n          <ul class=\"cube-scroll-list\">\n            <li\n              class=\"cube-scroll-item border-bottom-1px\"\n              v-for=\"(item, index) in data\"\n              :key=\"index\"\n              @click=\"clickItem(item)\">{{item}}</li>\n          </ul>\n        </slot>\n      </div>\n      <slot name=\"pullup\" :pullUpLoad=\"pullUpLoad\" :isPullUpLoad=\"isPullUpLoad\">\n        <div class=\"cube-pullup-wrapper\" v-if=\"pullUpLoad\">\n          <div class=\"before-trigger\" v-if=\"!isPullUpLoad\">\n            <span>{{ pullUpTxt }}</span>\n          </div>\n          <div class=\"after-trigger\" v-else>\n            <loading></loading>\n          </div>\n        </div>\n      </slot>\n    </div>\n    <div v-if=\"pullDownRefresh\" class=\"cube-pulldown\" ref=\"pulldown\">\n      <slot\n        name=\"pulldown\"\n        :pullDownRefresh=\"pullDownRefresh\"\n        :pullDownStyle=\"pullDownStyle\"\n        :beforePullDown=\"beforePullDown\"\n        :isPullingDown=\"isPullingDown\"\n        :bubbleY=\"bubbleY\">\n        <div class=\"cube-pulldown-wrapper\" :style=\"pullDownStyle\">\n          <div class=\"before-trigger\" v-show=\"beforePullDown\">\n            <bubble :y=\"bubbleY\" class=\"bubble\"></bubble>\n          </div>\n          <div class=\"after-trigger\" v-show=\"!beforePullDown\">\n            <div v-show=\"isPullingDown\" class=\"loading\">\n              <loading></loading>\n            </div>\n            <div v-show=\"!isPullingDown\" class=\"cube-pulldown-loaded\"><span>{{ refreshTxt }}</span></div>\n          </div>\n        </div>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import BScroll from 'better-scroll'\n  import Loading from '../loading/loading.vue'\n  import Bubble from '../bubble/bubble.vue'\n  import scrollMixin from '../../common/mixins/scroll'\n  import deprecatedMixin from '../../common/mixins/deprecated'\n  import { getRect } from '../../common/helpers/dom'\n  import { camelize } from '../../common/lang/string'\n  import { USE_TRANSITION } from '../../common/bscroll/constants'\n\n  const COMPONENT_NAME = 'cube-scroll'\n  const DIRECTION_H = 'horizontal'\n  const DIRECTION_V = 'vertical'\n  const DEFAULT_REFRESH_TXT = 'Refresh success'\n  const DEFAULT_STOP_TIME = 600\n\n  const EVENT_CLICK = 'click'\n  const EVENT_PULLING_DOWN = 'pulling-down'\n  const EVENT_PULLING_UP = 'pulling-up'\n\n  const EVENT_SCROLL = 'scroll'\n  const EVENT_BEFORE_SCROLL_START = 'before-scroll-start'\n  const EVENT_SCROLL_END = 'scroll-end'\n\n  const NEST_MODE_NONE = 'none'\n  const NEST_MODE_NATIVE = 'native'\n\n  const SCROLL_EVENTS = [EVENT_SCROLL, EVENT_BEFORE_SCROLL_START, EVENT_SCROLL_END]\n\n  const DEFAULT_OPTIONS = {\n    observeDOM: true,\n    click: true,\n    probeType: 1,\n    scrollbar: false,\n    pullDownRefresh: false,\n    pullUpLoad: false\n  }\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [scrollMixin, deprecatedMixin],\n    provide() {\n      return {\n        parentScroll: this\n      }\n    },\n    inject: {\n      parentScroll: {\n        default: null\n      }\n    },\n    props: {\n      data: {\n        type: Array,\n        default() {\n          return []\n        }\n      },\n      scrollEvents: {\n        type: Array,\n        default() {\n          return []\n        },\n        validator(arr) {\n          return arr.every((item) => {\n            return SCROLL_EVENTS.indexOf(item) !== -1\n          })\n        }\n      },\n      // TODO: plan to remove at 1.10.0\n      listenScroll: {\n        type: Boolean,\n        default: undefined,\n        deprecated: {\n          replacedBy: 'scroll-events'\n        }\n      },\n      listenBeforeScroll: {\n        type: Boolean,\n        default: undefined,\n        deprecated: {\n          replacedBy: 'scroll-events'\n        }\n      },\n      direction: {\n        type: String,\n        default: DIRECTION_V\n      },\n      refreshDelay: {\n        type: Number,\n        default: 20\n      },\n      nestMode: {\n        type: String,\n        default: NEST_MODE_NONE\n      }\n    },\n    data() {\n      return {\n        beforePullDown: true,\n        isPullingDown: false,\n        isPullUpLoad: false,\n        pullUpNoMore: false,\n        bubbleY: 0,\n        pullDownStyle: '',\n        pullDownStop: 40,\n        pullDownHeight: 60,\n        pullUpHeight: 0\n      }\n    },\n    computed: {\n      pullDownRefresh() {\n        let pullDownRefresh = this.options.pullDownRefresh\n        if (!pullDownRefresh) {\n          return pullDownRefresh\n        }\n        if (pullDownRefresh === true) {\n          pullDownRefresh = {}\n        }\n        return Object.assign({stop: this.pullDownStop}, pullDownRefresh)\n      },\n      pullUpLoad() {\n        return this.options.pullUpLoad\n      },\n      pullUpTxt() {\n        const pullUpLoad = this.pullUpLoad\n        const txt = pullUpLoad && pullUpLoad.txt\n        const moreTxt = (txt && txt.more) || ''\n        const noMoreTxt = (txt && txt.noMore) || ''\n\n        return this.pullUpNoMore ? noMoreTxt : moreTxt\n      },\n      refreshTxt() {\n        const pullDownRefresh = this.pullDownRefresh\n        return (pullDownRefresh && pullDownRefresh.txt) || DEFAULT_REFRESH_TXT\n      },\n      finalScrollEvents() {\n        const finalScrollEvents = this.scrollEvents.slice()\n\n        if (!finalScrollEvents.length) {\n          this.listenScroll && finalScrollEvents.push(EVENT_SCROLL)\n          this.listenBeforeScroll && finalScrollEvents.push(EVENT_BEFORE_SCROLL_START)\n        }\n        return finalScrollEvents\n      },\n      needListenScroll() {\n        return this.finalScrollEvents.indexOf(EVENT_SCROLL) !== -1 || this.parentScroll\n      }\n    },\n    watch: {\n      data() {\n        setTimeout(() => {\n          this.forceUpdate(true)\n        }, this.refreshDelay)\n      },\n      pullDownRefresh: {\n        handler(newVal, oldVal) {\n          if (newVal) {\n            this.scroll.openPullDown(newVal)\n            if (!oldVal) {\n              this._onPullDownRefresh()\n              this._pullDownRefreshChangeHandler()\n            }\n          }\n\n          if (!newVal && oldVal) {\n            this.scroll.closePullDown()\n            this._offPullDownRefresh()\n            this._pullDownRefreshChangeHandler()\n          }\n        },\n        deep: true\n      },\n      pullUpLoad: {\n        handler(newVal, oldVal) {\n          if (newVal) {\n            this.scroll.openPullUp(newVal)\n            if (!oldVal) {\n              this._onPullUpLoad()\n              this._pullUpLoadChangeHandler()\n            }\n          }\n\n          if (!newVal && oldVal) {\n            this.scroll.closePullUp()\n            this._offPullUpLoad()\n            this._pullUpLoadChangeHandler()\n          }\n        },\n        deep: true\n      }\n    },\n    activated() {\n      /* istanbul ignore next */\n      this.enable()\n    },\n    deactivated() {\n      /* istanbul ignore next */\n      this.disable()\n    },\n    mounted() {\n      this.$nextTick(() => {\n        this.initScroll()\n      })\n    },\n    beforeDestroy() {\n      this.destroy()\n    },\n    methods: {\n      initScroll() {\n        if (!this.$refs.wrapper) {\n          return\n        }\n        this._calculateMinHeight()\n        let dynamicOptions = {\n          scrollY: this.direction === DIRECTION_V,\n          scrollX: this.direction === DIRECTION_H,\n          probeType: this.needListenScroll ? 3 : 1,\n          useTransition: USE_TRANSITION\n        }\n        let options = Object.assign({}, DEFAULT_OPTIONS, dynamicOptions, this.options)\n\n        this.scroll = new BScroll(this.$refs.wrapper, options)\n\n        this.parentScroll && this.nestMode !== NEST_MODE_NONE && this._handleNestScroll()\n\n        this._listenScrollEvents()\n\n        if (this.pullDownRefresh) {\n          this._onPullDownRefresh()\n          this._pullDownRefreshChangeHandler()\n        }\n\n        if (this.pullUpLoad) {\n          this._onPullUpLoad()\n          this._pullUpLoadChangeHandler()\n        }\n      },\n      disable() {\n        this.scroll && this.scroll.disable()\n      },\n      enable() {\n        this.scroll && this.scroll.enable()\n      },\n      refresh() {\n        this._calculateMinHeight()\n        this.scroll && this.scroll.refresh()\n      },\n      destroy() {\n        this.scroll && this.scroll.destroy()\n        this.scroll = null\n      },\n      scrollTo() {\n        this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)\n      },\n      scrollToElement() {\n        this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments)\n      },\n      clickItem(item) {\n        this.$emit(EVENT_CLICK, item)\n      },\n      async forceUpdate(dirty = false, nomore = false) {\n        if (this.isPullDownUpdating) {\n          return\n        }\n\n        if (this.pullDownRefresh && this.isPullingDown) {\n          this.isPullingDown = false\n          this.isPullDownUpdating = true\n          await this._waitFinishPullDown()\n          this.isPullDownUpdating = false\n          await this._waitResetPullDown(dirty)\n        } else if (this.pullUpLoad && this.isPullUpLoad) {\n          this.isPullUpLoad = false\n          this.scroll.finishPullUp()\n          this.pullUpNoMore = !dirty || nomore\n        }\n\n        dirty && this.refresh()\n      },\n      resetPullUpTxt() {\n        this.pullUpNoMore = false\n      },\n      _listenScrollEvents() {\n        this.finalScrollEvents.forEach((event) => {\n          this.scroll.on(camelize(event), (...args) => {\n            this.$emit(event, ...args)\n          })\n        })\n      },\n      _handleNestScroll() {\n        // waiting scroll initial\n        this.$nextTick(() => {\n          const innerScroll = this.scroll\n          const outerScroll = this.parentScroll.scroll\n          const scrolls = [innerScroll, outerScroll]\n          scrolls.forEach((scroll, index, arr) => {\n            // scroll ended always enable them\n            scroll.on('touchEnd', () => {\n              outerScroll.enable()\n              innerScroll.enable()\n              // when inner scroll reaching boundary, we will disable inner scroll, so when 'touchend' event fire,\n              // the inner scroll will not reset initiated within '_end' method in better-scroll.\n              // then lead to inner and outer scrolls together when we touch and move on the outer scroll element,\n              // so here we reset inner scroll's 'initiated' manually.\n              innerScroll.initiated = false\n            })\n\n            scroll.on('beforeScrollStart', () => {\n              this.touchStartMoment = true\n              const anotherScroll = arr[(index + 1) % 2]\n              anotherScroll.stop()\n              anotherScroll.resetPosition()\n            })\n          })\n\n          innerScroll.on('scroll', (pos) => {\n            // if scroll event triggered not by touch event, such as by 'scrollTo' method\n            if (!innerScroll.initiated || innerScroll.isInTransition) {\n              return\n            }\n\n            if (this.nestMode === NEST_MODE_NATIVE && !this.touchStartMoment) {\n              return\n            }\n\n            const reachBoundary = this._checkReachBoundary(pos)\n            if (reachBoundary) {\n              innerScroll.resetPosition()\n              innerScroll.disable()\n              // Prevent outer scroll have a bouncing step when enabled in 'free' nestMode.\n              outerScroll.pointX = innerScroll.pointX\n              outerScroll.pointY = innerScroll.pointY\n              outerScroll.enable()\n            } else {\n              outerScroll.disable()\n            }\n            this.touchStartMoment = false\n          })\n        })\n      },\n      _checkReachBoundary(pos) {\n        const distX = this.scroll.distX\n        const distY = this.scroll.distY\n        const reachBoundaryX = distX > 0 ? pos.x >= this.scroll.minScrollX : distX < 0 ? pos.x <= this.scroll.maxScrollX : false\n        const reachBoundaryY = distY > 0 ? pos.y >= this.scroll.minScrollY : distY < 0 ? pos.y <= this.scroll.maxScrollY : false\n        const freeScroll = this.scroll.freeScroll\n        const hasHorizontalScroll = this.scroll.hasHorizontalScroll\n        const hasVerticalScroll = this.scroll.hasVerticalScroll\n\n        if (!hasHorizontalScroll && !hasVerticalScroll) {\n          return true\n        }\n\n        if (freeScroll) {\n          return reachBoundaryX || reachBoundaryY\n        }\n\n        let reachBoundary\n        if (this.scroll.movingDirectionX) {\n          reachBoundary = reachBoundaryX\n        } else if (this.scroll.movingDirectionY) {\n          reachBoundary = reachBoundaryY\n        }\n        return reachBoundary\n      },\n      _calculateMinHeight() {\n        const { wrapper, listWrapper } = this.$refs\n        const pullUpLoad = this.pullUpLoad\n        const pullDownRefresh = this.pullDownRefresh\n        let minHeight = 0\n\n        if (pullDownRefresh || pullUpLoad) {\n          const wrapperHeight = getRect(wrapper).height\n          minHeight = wrapperHeight + 1\n          if (pullUpLoad && pullUpLoad.visible) {\n            // minHeight = wrapperHeight + 1 - pullUpHeight, then pullUpLoad text is visible\n            // when content's height is not larger than wrapper height\n            minHeight -= this.pullUpHeight\n          }\n        }\n\n        listWrapper.style.minHeight = `${minHeight}px`\n      },\n      _onPullDownRefresh() {\n        this.scroll.on('pullingDown', this._pullDownHandle)\n        this.scroll.on('scroll', this._pullDownScrollHandle)\n      },\n      _offPullDownRefresh() {\n        this.scroll.off('pullingDown', this._pullDownHandle)\n        this.scroll.off('scroll', this._pullDownScrollHandle)\n      },\n      _pullDownRefreshChangeHandler() {\n        this.$nextTick(() => {\n          this._getPullDownEleHeight()\n          this._calculateMinHeight()\n        })\n      },\n      _pullDownHandle() {\n        if (this.resetPullDownTimer) {\n          clearTimeout(this.resetPullDownTimer)\n        }\n        this.beforePullDown = false\n        this.isPullingDown = true\n        this.$emit(EVENT_PULLING_DOWN)\n      },\n      _pullDownScrollHandle(pos) {\n        if (this.beforePullDown) {\n          this.bubbleY = Math.max(0, pos.y - this.pullDownHeight)\n          this.pullDownStyle = `top:${Math.min(pos.y - this.pullDownHeight, 0)}px`\n        } else {\n          this.bubbleY = 0\n          this.pullDownStyle = `top:${Math.min(pos.y - this.pullDownStop, 0)}px`\n        }\n      },\n      _pullUpLoadChangeHandler() {\n        this.$nextTick(() => {\n          this._getPullUpEleHeight()\n          this._calculateMinHeight()\n        })\n      },\n      _onPullUpLoad() {\n        this.scroll.on('pullingUp', this._pullUpHandle)\n      },\n      _offPullUpLoad() {\n        this.scroll.off('pullingUp', this._pullUpHandle)\n      },\n      _pullUpHandle() {\n        this.isPullUpLoad = true\n        this.$emit(EVENT_PULLING_UP)\n      },\n      _waitFinishPullDown(next) {\n        const {stopTime = DEFAULT_STOP_TIME} = this.pullDownRefresh\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.scroll.finishPullDown()\n            resolve()\n          }, stopTime)\n        })\n      },\n      _waitResetPullDown(dirty) {\n        return new Promise(resolve => {\n          this.resetPullDownTimer = setTimeout(() => {\n            this.pullDownStyle = `top: -${this.pullDownHeight}px`\n            this.beforePullDown = true\n            resolve()\n          }, this.scroll.options.bounceTime)\n        })\n      },\n      _getPullDownEleHeight() {\n        let pulldown = this.$refs.pulldown\n        if (!pulldown) {\n          return\n        }\n        pulldown = pulldown.firstChild\n        this.pullDownHeight = getRect(pulldown).height\n\n        this.beforePullDown = false\n        this.isPullingDown = true\n        this.$nextTick(() => {\n          this.pullDownStop = getRect(pulldown).height\n\n          this.beforePullDown = true\n          this.isPullingDown = false\n        })\n      },\n      _getPullUpEleHeight() {\n        const listWrapper = this.$refs.listWrapper\n        const pullup = listWrapper.nextElementSibling\n        if (!pullup) {\n          this.pullUpHeight = 0\n          return\n        }\n        this.pullUpHeight = getRect(pullup).height\n      }\n    },\n    components: {\n      Loading,\n      Bubble\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n\n  .cube-scroll-wrapper\n    position: relative\n    height: 100%\n    overflow: hidden\n\n  .cube-scroll-list-wrapper\n    overflow: hidden\n\n  .cube-pulldown-wrapper\n    position: absolute\n    width: 100%\n    left: 0\n    display: flex\n    justify-content: center\n    align-items: center\n    transition: all\n    .before-trigger\n      height: 54px\n      line-height: 0\n      padding-top: 6px\n    .after-trigger\n      .loading\n        padding: 8px 0\n      .cube-pulldown-loaded\n        padding: 12px 0\n\n  .cube-pullup-wrapper\n    width: 100%\n    display: flex\n    justify-content: center\n    align-items: center\n    .before-trigger\n      padding: 22px 0\n      min-height: 1em\n    .after-trigger\n      padding: 19px 0\n\n  .cube-scroll-content\n    position: relative\n    z-index: 1\n\n  .cube-scroll-item\n    height: 60px\n    line-height: 60px\n    font-size: $fontsize-large-x\n    padding-left: 20px\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}