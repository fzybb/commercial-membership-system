{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.string.fixed.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { getRect, prefixStyle, addClass, removeClass } from '../../common/helpers/dom';\nvar COMPONENT_NAME = 'cube-sticky';\nvar EVENT_CHANGE = 'change';\nvar EVENT_DIFF_CHANGE = 'diff-change';\nvar transformStyleKey = prefixStyle('transform');\nexport default {\n  name: COMPONENT_NAME,\n  provide: function provide() {\n    return {\n      sticky: this\n    };\n  },\n  props: {\n    pos: {\n      type: Number,\n      required: true\n    },\n    checkTop: {\n      type: Boolean,\n      \"default\": true\n    },\n    fixedShowAni: {\n      type: String,\n      \"default\": function _default() {\n        return this.checkTop ? '' : 'cube-sticky-fixed-fade';\n      }\n    },\n    offset: {\n      type: Number,\n      \"default\": 0\n    }\n  },\n  data: function data() {\n    return {\n      diff: 0,\n      currentDiff: 0,\n      currentIndex: -1,\n      currentKey: ''\n    };\n  },\n  computed: {\n    fixedShow: function fixedShow() {\n      var targetEle = this.eles[this.currentIndex];\n      return !!targetEle;\n    }\n  },\n  watch: {\n    diff: function diff(newVal) {\n      if (newVal >= 0) {\n        newVal = 0;\n      }\n      newVal = Math.ceil(newVal);\n      if (this._fixedTop === newVal) {\n        return;\n      }\n      this._fixedTop = newVal;\n      this.$refs.fixedEle.style[transformStyleKey] = \"translate3d(0, \".concat(newVal, \"px, 0)\");\n    },\n    pos: 'computeCurrentSticky',\n    currentIndex: function currentIndex(newIndex, oldIndex) {\n      var _this = this;\n      var oldEle = this.eles[oldIndex];\n      var newEle = this.eles[newIndex];\n      var currentKey = newEle && newEle.eleKey !== undefined ? newEle.eleKey : newIndex === -1 ? '' : newIndex;\n      var fixedEle = this.$refs.fixedEle;\n      var fixedSlot = this.$slots.fixed || this.$scopedSlots.fixed;\n      this.$nextTick(function () {\n        if (fixedSlot) {\n          _this.fixedEleHeight = fixedEle.offsetHeight;\n        } else {\n          var oldChild = fixedEle.firstElementChild;\n          if (oldEle) {\n            oldEle.$el.appendChild(oldChild);\n            oldEle.refresh();\n          }\n          if (newEle) {\n            fixedEle.appendChild(newEle.$el.firstElementChild);\n            _this.fixedEleHeight = fixedEle.offsetHeight;\n          } else {\n            _this.fixedEleHeight = 0;\n          }\n        }\n        var onClass = 'cube-sticky-ele-on';\n        if (oldEle) {\n          removeClass(oldEle.$el, onClass);\n        }\n        if (newEle) {\n          addClass(newEle.$el, onClass);\n        }\n      });\n      this.currentKey = currentKey;\n      this.$emit(EVENT_CHANGE, currentKey, newIndex);\n    },\n    currentDiff: function currentDiff(newVal) {\n      var height = this.heights[this.currentIndex] || 0;\n      this.$emit(EVENT_DIFF_CHANGE, newVal, height);\n    }\n  },\n  created: function created() {\n    this.fixedEleHeight = 0;\n    this.eles = [];\n    this.positions = [];\n    this.heights = [];\n  },\n  mounted: function mounted() {\n    this.refresh();\n  },\n  methods: {\n    addEle: function addEle(ele) {\n      this.eles.push(ele);\n    },\n    removeEle: function removeEle(ele) {\n      var i = this.eles.indexOf(ele);\n      this.eles.splice(i, 1);\n      this.positions.splice(i, 1);\n    },\n    refresh: function refresh() {\n      var _this2 = this;\n      this.$nextTick(function () {\n        _this2.eles.forEach(function (ele) {\n          ele.refresh();\n        });\n        _this2._calculateHeight();\n        _this2.computeCurrentSticky(_this2.pos);\n      });\n    },\n    computeCurrentSticky: function computeCurrentSticky(scrollY) {\n      scrollY += this.offset;\n      var positions = this.positions;\n      var heights = this.heights;\n      var checkTop = this.checkTop;\n      var len = positions.length;\n      for (var i = len - 1; i >= 0; i--) {\n        var isLast = i === len - 1;\n        var nextTop = isLast ? scrollY : positions[i + 1];\n        var top = void 0;\n        var bottom = void 0;\n        if (checkTop) {\n          top = positions[i];\n          bottom = top + heights[i];\n        } else {\n          top = positions[i] + heights[i];\n          bottom = top;\n        }\n        var max = Math.max(bottom, nextTop);\n        if (scrollY >= top && scrollY <= max) {\n          this.currentIndex = i;\n          this.currentDiff = scrollY - top;\n          var diff = nextTop - scrollY;\n          if (diff >= 0 && !isLast) {\n            this.diff = diff - (this.fixedEleHeight || heights[i]);\n          } else {\n            this.diff = 0;\n          }\n          return;\n        }\n      }\n      this.currentIndex = -1;\n      this.currentDiff = 0;\n    },\n    _calculateHeight: function _calculateHeight() {\n      var _this3 = this;\n      var eles = this.eles;\n      eles.forEach(function (ele, i) {\n        var _getRect = getRect(ele.$el),\n          top = _getRect.top,\n          height = _getRect.height;\n        _this3.positions[i] = top;\n        _this3.heights[i] = height;\n      });\n      this.fixedEleHeight = this.$refs.fixedEle.offsetHeight;\n    }\n  }\n};","map":{"version":3,"names":["getRect","prefixStyle","addClass","removeClass","COMPONENT_NAME","EVENT_CHANGE","EVENT_DIFF_CHANGE","transformStyleKey","name","provide","sticky","props","pos","type","Number","required","checkTop","Boolean","fixedShowAni","String","_default","offset","data","diff","currentDiff","currentIndex","currentKey","computed","fixedShow","targetEle","eles","watch","newVal","Math","ceil","_fixedTop","$refs","fixedEle","style","concat","newIndex","oldIndex","_this","oldEle","newEle","eleKey","undefined","fixedSlot","$slots","fixed","$scopedSlots","$nextTick","fixedEleHeight","offsetHeight","oldChild","firstElementChild","$el","appendChild","refresh","onClass","$emit","height","heights","created","positions","mounted","methods","addEle","ele","push","removeEle","i","indexOf","splice","_this2","forEach","_calculateHeight","computeCurrentSticky","scrollY","len","length","isLast","nextTop","top","bottom","max","_this3","_getRect"],"sources":["node_modules/cube-ui/src/components/sticky/sticky.vue"],"sourcesContent":["<template>\n  <div class=\"cube-sticky\">\n    <slot></slot>\n    <transition :name=\"fixedShowAni\">\n      <div\n        ref=\"fixedEle\"\n        v-show=\"fixedShow\"\n        class=\"cube-sticky-fixed\">\n        <slot name=\"fixed\" :current=\"currentKey\" :index=\"currentIndex\"></slot>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import {\n    getRect,\n    prefixStyle,\n    addClass,\n    removeClass\n  } from '../../common/helpers/dom'\n\n  const COMPONENT_NAME = 'cube-sticky'\n  const EVENT_CHANGE = 'change'\n  const EVENT_DIFF_CHANGE = 'diff-change'\n\n  const transformStyleKey = prefixStyle('transform')\n\n  export default {\n    name: COMPONENT_NAME,\n    provide() {\n      return {\n        sticky: this\n      }\n    },\n    props: {\n      pos: {\n        type: Number,\n        required: true\n      },\n      checkTop: {\n        type: Boolean,\n        default: true\n      },\n      fixedShowAni: {\n        type: String,\n        default() {\n          return this.checkTop ? '' : 'cube-sticky-fixed-fade'\n        }\n      },\n      offset: {\n        type: Number,\n        default: 0\n      }\n    },\n    data() {\n      return {\n        diff: 0,\n        currentDiff: 0,\n        currentIndex: -1,\n        currentKey: ''\n      }\n    },\n    computed: {\n      fixedShow() {\n        const targetEle = this.eles[this.currentIndex]\n        return !!targetEle\n      }\n    },\n    watch: {\n      diff(newVal) {\n        if (newVal >= 0) {\n          newVal = 0\n        }\n        newVal = Math.ceil(newVal)\n        if (this._fixedTop === newVal) {\n          return\n        }\n        this._fixedTop = newVal\n        this.$refs.fixedEle.style[transformStyleKey] = `translate3d(0, ${newVal}px, 0)`\n      },\n      pos: 'computeCurrentSticky',\n      currentIndex(newIndex, oldIndex) {\n        const oldEle = this.eles[oldIndex]\n        const newEle = this.eles[newIndex]\n\n        const currentKey = (newEle && newEle.eleKey !== undefined) ? newEle.eleKey : newIndex === -1 ? '' : newIndex\n        const fixedEle = this.$refs.fixedEle\n        const fixedSlot = this.$slots.fixed || this.$scopedSlots.fixed\n\n        this.$nextTick(() => {\n          if (fixedSlot) {\n            this.fixedEleHeight = fixedEle.offsetHeight\n          } else {\n            const oldChild = fixedEle.firstElementChild\n            if (oldEle) {\n              oldEle.$el.appendChild(oldChild)\n              oldEle.refresh()\n            }\n            if (newEle) {\n              fixedEle.appendChild(newEle.$el.firstElementChild)\n              this.fixedEleHeight = fixedEle.offsetHeight\n            } else {\n              this.fixedEleHeight = 0\n            }\n          }\n          const onClass = 'cube-sticky-ele-on'\n          if (oldEle) {\n            removeClass(oldEle.$el, onClass)\n          }\n          if (newEle) {\n            addClass(newEle.$el, onClass)\n          }\n        })\n\n        this.currentKey = currentKey\n        this.$emit(EVENT_CHANGE, currentKey, newIndex)\n      },\n      currentDiff(newVal) {\n        const height = this.heights[this.currentIndex] || 0\n        this.$emit(EVENT_DIFF_CHANGE, newVal, height)\n      }\n    },\n    created() {\n      this.fixedEleHeight = 0\n      this.eles = []\n      this.positions = []\n      this.heights = []\n    },\n    mounted() {\n      this.refresh()\n    },\n    methods: {\n      addEle(ele) {\n        this.eles.push(ele)\n      },\n      removeEle(ele) {\n        const i = this.eles.indexOf(ele)\n        this.eles.splice(i, 1)\n        this.positions.splice(i, 1)\n      },\n      refresh() {\n        this.$nextTick(() => {\n          this.eles.forEach((ele) => {\n            ele.refresh()\n          })\n          this._calculateHeight()\n          this.computeCurrentSticky(this.pos)\n        })\n      },\n      computeCurrentSticky(scrollY) {\n        scrollY += this.offset\n\n        const positions = this.positions\n        const heights = this.heights\n        const checkTop = this.checkTop\n\n        const len = positions.length\n        for (let i = len - 1; i >= 0; i--) {\n          const isLast = i === len - 1\n          const nextTop = isLast ? scrollY : positions[i + 1]\n          let top\n          let bottom\n          if (checkTop) {\n            top = positions[i]\n            bottom = top + heights[i]\n          } else {\n            top = positions[i] + heights[i]\n            bottom = top\n          }\n          const max = Math.max(bottom, nextTop)\n\n          if (scrollY >= top && scrollY <= max) {\n            this.currentIndex = i\n            this.currentDiff = scrollY - top\n            const diff = nextTop - scrollY\n            if (diff >= 0 && !isLast) {\n              this.diff = diff - (this.fixedEleHeight || heights[i])\n            } else {\n              this.diff = 0\n            }\n            return\n          }\n        }\n        this.currentIndex = -1\n        this.currentDiff = 0\n      },\n      _calculateHeight() {\n        const eles = this.eles\n        eles.forEach((ele, i) => {\n          const { top, height } = getRect(ele.$el)\n          this.positions[i] = top\n          this.heights[i] = height\n        })\n        this.fixedEleHeight = this.$refs.fixedEle.offsetHeight\n      }\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .cube-sticky\n    position: relative\n    height: 100%\n    overflow: hidden\n  .cube-sticky-fixed\n    z-index: 1\n    position: absolute\n    top: 0\n    left: 0\n    right: 0\n  .cube-sticky-fixed-fade-enter, .cube-sticky-fixed-fade-leave-active\n    opacity: 0\n  .cube-sticky-fixed-fade-enter-active, .cube-sticky-fixed-fade-leave-active\n    transition: all .2s ease-in-out\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}