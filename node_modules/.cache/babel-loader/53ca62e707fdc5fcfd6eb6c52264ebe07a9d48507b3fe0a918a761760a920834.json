{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport scrollMixin from '../../common/mixins/scroll';\nimport CubeScroll from '../scroll/scroll.vue';\nvar DIRECTION_H = 'horizontal';\nvar DIRECTION_V = 'vertical';\nvar COMPONENT_NAME = 'cube-scroll-nav-bar';\nvar EVENT_CHANGE = 'change';\nexport default {\n  name: COMPONENT_NAME,\n  inject: {\n    scrollNav: {\n      \"default\": null\n    }\n  },\n  mixins: [scrollMixin],\n  props: {\n    direction: {\n      type: String,\n      \"default\": DIRECTION_H,\n      validator: function validator(val) {\n        return val === DIRECTION_H || val === DIRECTION_V;\n      }\n    },\n    labels: {\n      type: Array,\n      \"default\": function _default() {\n        /* istanbul ignore next */\n        return [];\n      }\n    },\n    txts: {\n      type: Array,\n      \"default\": function _default() {\n        this._defaultTxts = true;\n        /* istanbul ignore next */\n        return this.labels;\n      }\n    },\n    current: {\n      type: [String, Number],\n      \"default\": ''\n    }\n  },\n  data: function data() {\n    return {\n      active: this.current,\n      usedTxts: this.txts\n    };\n  },\n  watch: {\n    labels: function labels(newLabels) {\n      if (this._defaultTxts) {\n        this.usedTxts = newLabels;\n      }\n    },\n    txts: function txts(newTxts) {\n      this.usedTxts = newTxts;\n    },\n    current: function current(newVal) {\n      this.active = newVal;\n    },\n    active: function active(newVal) {\n      this.$emit(EVENT_CHANGE, newVal);\n      this._adjust();\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.scrollNav && this.scrollNav.setBar(this);\n    if (this.active) {\n      // waiting panels loaded\n      this.$nextTick(function () {\n        _this._adjust();\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.scrollNav && this.scrollNav.setBar(null);\n  },\n  methods: {\n    clickHandler: function clickHandler(label) {\n      if (label === this.active) {\n        return;\n      }\n      this.active = label;\n      this.scrollNav && this.scrollNav.barChange(label);\n    },\n    refresh: function refresh() {\n      this.$refs.scroll.refresh();\n      this._adjust();\n    },\n    _adjust: function _adjust() {\n      var _this2 = this;\n      // waiting ui\n      this.$nextTick(function () {\n        var isHorizontal = _this2.direction === DIRECTION_H;\n        var targetProp = isHorizontal ? 'clientWidth' : 'clientHeight';\n        var active = _this2.active;\n        var viewportSize = _this2.$refs.scroll.$el[targetProp];\n        var itemsEle = _this2.$refs.items;\n        var scrollerSize = itemsEle[targetProp];\n        var minTranslate = Math.min(0, viewportSize - scrollerSize);\n        var middleTranslate = viewportSize / 2;\n        var items = itemsEle.children;\n        var size = 0;\n        _this2.labels.every(function (label, index) {\n          if (label === active) {\n            size += items[index][targetProp] / 2;\n            return false;\n          }\n          size += items[index][targetProp];\n          return true;\n        });\n        var translate = middleTranslate - size;\n        translate = Math.max(minTranslate, Math.min(0, translate));\n        _this2.$refs.scroll.scrollTo(isHorizontal ? translate : 0, isHorizontal ? 0 : translate, 300);\n      });\n    }\n  },\n  components: {\n    CubeScroll: CubeScroll\n  }\n};","map":{"version":3,"names":["scrollMixin","CubeScroll","DIRECTION_H","DIRECTION_V","COMPONENT_NAME","EVENT_CHANGE","name","inject","scrollNav","mixins","props","direction","type","String","validator","val","labels","Array","_default","txts","_defaultTxts","current","Number","data","active","usedTxts","watch","newLabels","newTxts","newVal","$emit","_adjust","mounted","_this","setBar","$nextTick","beforeDestroy","methods","clickHandler","label","barChange","refresh","$refs","scroll","_this2","isHorizontal","targetProp","viewportSize","$el","itemsEle","items","scrollerSize","minTranslate","Math","min","middleTranslate","children","size","every","index","translate","max","scrollTo","components"],"sources":["node_modules/cube-ui/src/components/scroll-nav-bar/scroll-nav-bar.vue"],"sourcesContent":["<template>\n  <div class=\"cube-scroll-nav-bar\" :class=\"'cube-scroll-nav-bar_' + direction\">\n    <cube-scroll\n      ref=\"scroll\"\n      nestMode=\"none\"\n      :options=\"options\"\n      :direction=\"direction\">\n      <div class=\"cube-scroll-nav-bar-items\" ref=\"items\">\n        <div\n          class=\"cube-scroll-nav-bar-item\"\n          v-for=\"(txt, index) in usedTxts\"\n          :key=\"index\"\n          :class=\"{'cube-scroll-nav-bar-item_active': active === labels[index]}\"\n          @click=\"clickHandler(labels[index])\">\n          <slot\n            :txt=\"txt\"\n            :index=\"index\"\n            :active=\"active\"\n            :label=\"labels[index]\">\n              <span v-html=\"txt\"></span>\n            </slot>\n        </div>\n      </div>\n    </cube-scroll>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import scrollMixin from '../../common/mixins/scroll'\n  import CubeScroll from '../scroll/scroll.vue'\n\n  const DIRECTION_H = 'horizontal'\n  const DIRECTION_V = 'vertical'\n\n  const COMPONENT_NAME = 'cube-scroll-nav-bar'\n  const EVENT_CHANGE = 'change'\n\n  export default {\n    name: COMPONENT_NAME,\n    inject: {\n      scrollNav: {\n        default: null\n      }\n    },\n    mixins: [scrollMixin],\n    props: {\n      direction: {\n        type: String,\n        default: DIRECTION_H,\n        validator(val) {\n          return val === DIRECTION_H || val === DIRECTION_V\n        }\n      },\n      labels: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      },\n      txts: {\n        type: Array,\n        default() {\n          this._defaultTxts = true\n          /* istanbul ignore next */\n          return this.labels\n        }\n      },\n      current: {\n        type: [String, Number],\n        default: ''\n      }\n    },\n    data() {\n      return {\n        active: this.current,\n        usedTxts: this.txts\n      }\n    },\n    watch: {\n      labels(newLabels) {\n        if (this._defaultTxts) {\n          this.usedTxts = newLabels\n        }\n      },\n      txts(newTxts) {\n        this.usedTxts = newTxts\n      },\n      current(newVal) {\n        this.active = newVal\n      },\n      active(newVal) {\n        this.$emit(EVENT_CHANGE, newVal)\n        this._adjust()\n      }\n    },\n    mounted() {\n      this.scrollNav && this.scrollNav.setBar(this)\n      if (this.active) {\n        // waiting panels loaded\n        this.$nextTick(() => {\n          this._adjust()\n        })\n      }\n    },\n    beforeDestroy() {\n      this.scrollNav && this.scrollNav.setBar(null)\n    },\n    methods: {\n      clickHandler(label) {\n        if (label === this.active) {\n          return\n        }\n        this.active = label\n        this.scrollNav && this.scrollNav.barChange(label)\n      },\n      refresh() {\n        this.$refs.scroll.refresh()\n        this._adjust()\n      },\n      _adjust() {\n        // waiting ui\n        this.$nextTick(() => {\n          const isHorizontal = this.direction === DIRECTION_H\n          const targetProp = isHorizontal ? 'clientWidth' : 'clientHeight'\n          const active = this.active\n          const viewportSize = this.$refs.scroll.$el[targetProp]\n          const itemsEle = this.$refs.items\n          const scrollerSize = itemsEle[targetProp]\n          const minTranslate = Math.min(0, viewportSize - scrollerSize)\n          const middleTranslate = viewportSize / 2\n          const items = itemsEle.children\n          let size = 0\n          this.labels.every((label, index) => {\n            if (label === active) {\n              size += (items[index][targetProp] / 2)\n              return false\n            }\n            size += items[index][targetProp]\n            return true\n          })\n          let translate = middleTranslate - size\n          translate = Math.max(minTranslate, Math.min(0, translate))\n          this.$refs.scroll.scrollTo(isHorizontal ? translate : 0, isHorizontal ? 0 : translate, 300)\n        })\n      }\n    },\n    components: {\n      CubeScroll\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n\n  .cube-scroll-nav-bar\n    position: relative\n    display: flex\n    color: $scroll-nav-color\n    background-color: $scroll-nav-bgc\n  .cube-scroll-nav-bar_horizontal\n    align-items: center\n    .cube-scroll-wrapper\n      flex: 1\n      text-align: center\n    .cube-scroll-content\n      display: inline-block\n      vertical-align: top\n    .cube-scroll-nav-bar-items\n      white-space: nowrap\n  .cube-scroll-nav-bar_vertical\n    height: 100%\n    justify-content: center\n    text-align: center\n    .cube-scroll-nav-bar-item\n      display: block\n  .cube-scroll-nav-bar-items\n    font-size: $fontsize-medium\n  .cube-scroll-nav-bar-item\n    display: inline-block\n    vertical-align: top\n    padding: 20px 15px\n  .cube-scroll-nav-bar-item_active\n    color: $scroll-nav-active-color\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}