{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport UploadBtn from './btn.vue';\nimport UploadFile from './file.vue';\nimport ajaxUpload from './ajax';\nimport btnMixin from './btn-mixin';\nimport { processFiles, newFile, URL, STATUS_READY, STATUS_UPLOADING, STATUS_ERROR, STATUS_SUCCESS } from './util';\nvar COMPONENT_NAME = 'cube-upload';\nvar EVENT_INPUT = 'input';\nvar EVENT_ADDED = 'files-added';\nvar EVENT_SUBMITTED = 'file-submitted';\nvar EVENT_REMOVED = 'file-removed';\nvar EVENT_SUCCESS = 'file-success';\nvar EVENT_ERROR = 'file-error';\nvar EVENT_CLICK = 'file-click';\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [btnMixin],\n  props: {\n    value: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    action: {\n      type: [String, Object],\n      \"default\": ''\n    },\n    max: {\n      type: Number,\n      \"default\": 10\n    },\n    auto: {\n      type: Boolean,\n      \"default\": true\n    },\n    simultaneousUploads: {\n      type: Number,\n      \"default\": 1\n    },\n    processFile: {\n      type: Function,\n      \"default\": function _default(file, cb) {\n        cb(file);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      files: this.value,\n      paused: !this.auto\n    };\n  },\n  computed: {\n    actionOptions: function actionOptions() {\n      var action = this.action;\n      if (typeof action === 'string') {\n        return action ? {\n          target: action\n        } : null;\n      } else {\n        return action;\n      }\n    },\n    isShowBtn: function isShowBtn() {\n      return this.files.length < this.max;\n    }\n  },\n  watch: {\n    value: function value(newVal) {\n      this.files = newVal;\n    },\n    files: function files(newFiles) {\n      this.$emit(EVENT_INPUT, newFiles);\n    }\n  },\n  methods: {\n    addFiles: function addFiles(files) {\n      var _this = this;\n      this.$emit(EVENT_ADDED, files);\n      var filesLen = this.files.length;\n      var newFiles = [];\n      var maxLen = this.max - filesLen;\n      var i = 0;\n      var file = files[i];\n      while (newFiles.length < maxLen && file) {\n        if (!file.ignore) {\n          newFiles.push(file);\n          this.files.push(newFile());\n        }\n        file = files[++i];\n      }\n      processFiles(newFiles, this.processFile, function (file, index) {\n        _this.$set(_this.files, filesLen + index, file);\n        _this.$emit(EVENT_SUBMITTED, file);\n      }, function () {\n        // waiting ui\n        _this.$nextTick(function () {\n          _this.upload();\n        });\n      });\n    },\n    removeFile: function removeFile(file) {\n      this.$emit(EVENT_REMOVED, file);\n      file._xhr && file._xhr.abort();\n      if (file.url) {\n        URL.revokeObjectURL(file.url);\n      }\n      var index = this.files.indexOf(file);\n      this.files.splice(index, 1);\n      this.upload();\n    },\n    fileClick: function fileClick(file, index) {\n      this.$emit(EVENT_CLICK, file, index);\n    },\n    upload: function upload(retry) {\n      var _this2 = this;\n      var options = this.actionOptions;\n      if (this.paused || !options) {\n        return;\n      }\n      var len = this.files.length;\n      var uploadingCount = 0;\n      var i = 0;\n      var _loop = function _loop() {\n        var file = _this2.files[i];\n        var status = file.status;\n        if (status === STATUS_READY || retry && status === STATUS_ERROR && file._retryId !== _this2.retryId) {\n          ajaxUpload(file, options, function (file) {\n            if (status === STATUS_ERROR) {\n              file._retryId = _this2.retryId;\n            }\n            _this2.$emit(file.status === STATUS_SUCCESS ? EVENT_SUCCESS : EVENT_ERROR, file);\n            _this2.upload(retry);\n          });\n          uploadingCount++;\n        } else if (status === STATUS_UPLOADING) {\n          uploadingCount++;\n        }\n        i++;\n      };\n      while (i < len && uploadingCount < this.simultaneousUploads) {\n        _loop();\n      }\n    },\n    start: function start() {\n      this.paused = false;\n      this.upload();\n    },\n    pause: function pause() {\n      this.paused = true;\n      this.files.forEach(function (file) {\n        if (file.status === STATUS_UPLOADING) {\n          file._xhr.abort();\n          file.status = STATUS_READY;\n        }\n      });\n    },\n    retry: function retry() {\n      this.retryId = Date.now();\n      this.paused = false;\n      this.upload(true);\n    }\n  },\n  components: {\n    UploadBtn: UploadBtn,\n    UploadFile: UploadFile\n  }\n};","map":{"version":3,"names":["UploadBtn","UploadFile","ajaxUpload","btnMixin","processFiles","newFile","URL","STATUS_READY","STATUS_UPLOADING","STATUS_ERROR","STATUS_SUCCESS","COMPONENT_NAME","EVENT_INPUT","EVENT_ADDED","EVENT_SUBMITTED","EVENT_REMOVED","EVENT_SUCCESS","EVENT_ERROR","EVENT_CLICK","name","mixins","props","value","type","Array","_default","action","String","Object","max","Number","auto","Boolean","simultaneousUploads","processFile","Function","file","cb","data","files","paused","computed","actionOptions","target","isShowBtn","length","watch","newVal","newFiles","$emit","methods","addFiles","_this","filesLen","maxLen","i","ignore","push","index","$set","$nextTick","upload","removeFile","_xhr","abort","url","revokeObjectURL","indexOf","splice","fileClick","retry","_this2","options","len","uploadingCount","_loop","status","_retryId","retryId","start","pause","forEach","Date","now","components"],"sources":["node_modules/cube-ui/src/components/upload/upload.vue"],"sourcesContent":["<template>\n  <div class=\"cube-upload\">\n    <slot>\n      <div class=\"cube-upload-def clear-fix\">\n        <upload-file v-for=\"(file, i) in files\" :file=\"file\" :key=\"i\" @click=\"fileClick(file, i)\"></upload-file>\n        <upload-btn :multiple=\"multiple\" :accept=\"accept\" v-show=\"isShowBtn\"></upload-btn>\n      </div>\n    </slot>\n  </div>\n</template>\n<script type=\"text/ecmascript-6\">\n  import UploadBtn from './btn.vue'\n  import UploadFile from './file.vue'\n  import ajaxUpload from './ajax'\n  import btnMixin from './btn-mixin'\n  import {\n    processFiles,\n    newFile,\n    URL,\n    STATUS_READY,\n    STATUS_UPLOADING,\n    STATUS_ERROR,\n    STATUS_SUCCESS\n  } from './util'\n\n  const COMPONENT_NAME = 'cube-upload'\n  const EVENT_INPUT = 'input'\n  const EVENT_ADDED = 'files-added'\n  const EVENT_SUBMITTED = 'file-submitted'\n  const EVENT_REMOVED = 'file-removed'\n  const EVENT_SUCCESS = 'file-success'\n  const EVENT_ERROR = 'file-error'\n  const EVENT_CLICK = 'file-click'\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [btnMixin],\n    props: {\n      value: {\n        type: Array,\n        default() {\n          return []\n        }\n      },\n      action: {\n        type: [String, Object],\n        default: ''\n      },\n      max: {\n        type: Number,\n        default: 10\n      },\n      auto: {\n        type: Boolean,\n        default: true\n      },\n      simultaneousUploads: {\n        type: Number,\n        default: 1\n      },\n      processFile: {\n        type: Function,\n        default: function (file, cb) {\n          cb(file)\n        }\n      }\n    },\n    data() {\n      return {\n        files: this.value,\n        paused: !this.auto\n      }\n    },\n    computed: {\n      actionOptions() {\n        const action = this.action\n        if (typeof action === 'string') {\n          return action ? {\n            target: action\n          } : null\n        } else {\n          return action\n        }\n      },\n      isShowBtn() {\n        return this.files.length < this.max\n      }\n    },\n    watch: {\n      value(newVal) {\n        this.files = newVal\n      },\n      files(newFiles) {\n        this.$emit(EVENT_INPUT, newFiles)\n      }\n    },\n    methods: {\n      addFiles(files) {\n        this.$emit(EVENT_ADDED, files)\n        const filesLen = this.files.length\n        const newFiles = []\n        const maxLen = this.max - filesLen\n        let i = 0\n        let file = files[i]\n        while (newFiles.length < maxLen && file) {\n          if (!file.ignore) {\n            newFiles.push(file)\n            this.files.push(newFile())\n          }\n          file = files[++i]\n        }\n        processFiles(newFiles, this.processFile, (file, index) => {\n          this.$set(this.files, filesLen + index, file)\n          this.$emit(EVENT_SUBMITTED, file)\n        }, () => {\n          // waiting ui\n          this.$nextTick(() => {\n            this.upload()\n          })\n        })\n      },\n      removeFile(file) {\n        this.$emit(EVENT_REMOVED, file)\n        file._xhr && file._xhr.abort()\n        if (file.url) {\n          URL.revokeObjectURL(file.url)\n        }\n        const index = this.files.indexOf(file)\n        this.files.splice(index, 1)\n        this.upload()\n      },\n      fileClick(file, index) {\n        this.$emit(EVENT_CLICK, file, index)\n      },\n      upload(retry) {\n        const options = this.actionOptions\n        if (this.paused || !options) {\n          return\n        }\n        const len = this.files.length\n        let uploadingCount = 0\n        let i = 0\n        while (i < len && uploadingCount < this.simultaneousUploads) {\n          const file = this.files[i]\n          const status = file.status\n          if (status === STATUS_READY || (retry && status === STATUS_ERROR && file._retryId !== this.retryId)) {\n            ajaxUpload(file, options, (file) => {\n              if (status === STATUS_ERROR) {\n                file._retryId = this.retryId\n              }\n              this.$emit(file.status === STATUS_SUCCESS ? EVENT_SUCCESS : EVENT_ERROR, file)\n              this.upload(retry)\n            })\n            uploadingCount++\n          } else if (status === STATUS_UPLOADING) {\n            uploadingCount++\n          }\n          i++\n        }\n      },\n      start() {\n        this.paused = false\n        this.upload()\n      },\n      pause() {\n        this.paused = true\n        this.files.forEach((file) => {\n          if (file.status === STATUS_UPLOADING) {\n            file._xhr.abort()\n            file.status = STATUS_READY\n          }\n        })\n      },\n      retry() {\n        this.retryId = Date.now()\n        this.paused = false\n        this.upload(true)\n      }\n    },\n    components: {\n      UploadBtn,\n      UploadFile\n    }\n  }\n</script>\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  .cube-upload\n    position: relative\n\n  .cube-upload-def\n    margin-right: -10px\n    .cube-upload-btn, .cube-upload-file\n      float: left\n      margin: 0 10px 10px 0\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}