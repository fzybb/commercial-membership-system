{"ast":null,"code":"import _defineProperty from \"C:/Users/fu_71/OneDrive/Desktop/fitness/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/fu_71/OneDrive/Desktop/fitness/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport { prefixStyle } from '../../common/helpers/dom';\nimport CubeDrawerPanel from './drawer-panel.vue';\nimport visibilityMixin from '../../common/mixins/visibility';\nimport popupMixin from '../../common/mixins/popup';\nvar COMPONENT_NAME = 'cube-drawer';\nvar EVENT_CHANGE = 'change';\nvar EVENT_SELECT = 'select';\nvar EVENT_CANCEL = 'cancel';\nvar transform = prefixStyle('transform');\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [visibilityMixin, popupMixin],\n  props: {\n    title: {\n      type: String,\n      \"default\": ''\n    },\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        /* istanbul ignore next */\n        return [];\n      }\n    },\n    selectedIndex: {\n      type: Array,\n      \"default\": function _default() {\n        /* istanbul ignore next */\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      index: -1,\n      selectedVal: [],\n      selectedText: [],\n      selected: _toConsumableArray(this.selectedIndex),\n      slideStyle: _defineProperty({}, transform, 'translate3d(0, 0, 0)')\n    };\n  },\n  watch: {\n    selectedIndex: function selectedIndex(newVal) {\n      this.selected = _toConsumableArray(newVal);\n    },\n    index: function index(newIndex, oldIndex) {\n      this.showPanel();\n      if (newIndex < oldIndex) {\n        this.hidePanel();\n      }\n    }\n  },\n  created: function created() {\n    this.panels = [];\n  },\n  methods: {\n    show: function show() {\n      if (this.isVisible) {\n        return;\n      }\n      this.isVisible = true;\n      var len = this.data.length;\n      for (var i = 0; i < len; i++) {\n        this.index = i;\n        if (this.selected[i] < 0 || this.selected[i] === undefined) {\n          if (i > 0) {\n            var lastIndex = i - 1;\n            var index = this.selected[lastIndex];\n            this.changeHandler(lastIndex, this.data[lastIndex][index], index);\n          }\n          break;\n        }\n      }\n      this.computedStyle();\n    },\n    hide: function hide() {\n      this.slideStyle[transform] = 'translate3d(0, 0, 0)';\n      this.shouldHide = true;\n    },\n    addPanel: function addPanel(panel) {\n      this.panels.push(panel);\n    },\n    removePanel: function removePanel(panel) {\n      var i = this.panels.indexOf(panel);\n      this.panels.splice(i, 1);\n    },\n    transitionend: function transitionend() {\n      if (this.shouldHide) {\n        this.isVisible = false;\n        this.shouldHide = false;\n      }\n    },\n    refill: function refill(panelIndex, data, index) {\n      this.$set(this.data, panelIndex, data);\n      this.index = panelIndex;\n      this.selected = this.selected.slice(0, panelIndex);\n      this.selectedVal = this.selectedVal.slice(0, panelIndex);\n      this.selectedText = this.selectedText.slice(0, panelIndex);\n      if (index >= 0) {\n        this.$set(this.selected, panelIndex, index);\n        this.changeHandler(panelIndex, this.data[panelIndex][index], index);\n      }\n    },\n    showPanel: function showPanel() {\n      var index = this.index;\n      var i = 0;\n      while (i <= index) {\n        this.panels[i].show();\n        i++;\n      }\n      this.computedStyle();\n    },\n    hidePanel: function hidePanel() {\n      var len = this.data.length;\n      var i = this.index + 1;\n      while (i < len) {\n        this.panels[i].hide();\n        i++;\n      }\n    },\n    computedStyle: function computedStyle() {\n      var _this = this;\n      this.$nextTick(function () {\n        var allWidth = 0;\n        var i = 0;\n        var index = _this.index;\n        while (i <= index) {\n          var el = _this.panels[i].$el;\n          allWidth += el.offsetWidth;\n          var elStyle = window.getComputedStyle(el);\n          allWidth += parseInt(elStyle.marginLeft);\n          allWidth += parseInt(elStyle.marginRight);\n          i++;\n        }\n        _this.slideStyle[transform] = \"translate3d(-\".concat(allWidth, \"px, 0, 0)\");\n      });\n    },\n    changeHandler: function changeHandler(panelIndex, item, index) {\n      if (typeof item === 'string') {\n        this.selectedVal[panelIndex] = item;\n        this.selectedText[panelIndex] = item;\n      } else {\n        this.selectedVal[panelIndex] = item.value;\n        this.selectedText[panelIndex] = item.text;\n      }\n      this.$set(this.selected, panelIndex, index);\n      if (panelIndex === this.data.length - 1) {\n        // last column\n        this.$emit(EVENT_SELECT, this.selectedVal, this.selected, this.selectedText);\n        this.hide();\n      } else {\n        this.$emit(EVENT_CHANGE, panelIndex, item, this.selectedVal, this.selected, this.selectedText);\n      }\n    },\n    drawerClick: function drawerClick() {\n      this.hide();\n      this.$emit(EVENT_CANCEL);\n    }\n  },\n  components: {\n    CubeDrawerPanel: CubeDrawerPanel\n  }\n};","map":{"version":3,"names":["prefixStyle","CubeDrawerPanel","visibilityMixin","popupMixin","COMPONENT_NAME","EVENT_CHANGE","EVENT_SELECT","EVENT_CANCEL","transform","name","mixins","props","title","type","String","data","Array","_default","selectedIndex","index","selectedVal","selectedText","selected","_toConsumableArray","slideStyle","_defineProperty","watch","newVal","newIndex","oldIndex","showPanel","hidePanel","created","panels","methods","show","isVisible","len","length","i","undefined","lastIndex","changeHandler","computedStyle","hide","shouldHide","addPanel","panel","push","removePanel","indexOf","splice","transitionend","refill","panelIndex","$set","slice","_this","$nextTick","allWidth","el","$el","offsetWidth","elStyle","window","getComputedStyle","parseInt","marginLeft","marginRight","concat","item","value","text","$emit","drawerClick","components"],"sources":["node_modules/cube-ui/src/components/drawer/drawer.vue"],"sourcesContent":["<template>\n  <div class=\"cube-drawer\" @click=\"drawerClick\" v-show=\"isVisible\">\n    <div class=\"cube-drawer-main\" :style=\"slideStyle\" @click.stop @transitionend=\"transitionend\">\n      <div class=\"cube-drawer-title\" v-show=\"$slots.title || title\">\n        <slot name=\"title\">{{title}}</slot>\n      </div>\n      <div class=\"cube-drawer-panels\" @transitionend.stop>\n        <slot>\n          <cube-drawer-panel\n            v-for=\"(panel, index) in data\"\n            :key=\"index\"\n            :index=\"index\"\n            :data=\"panel\" />\n        </slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import { prefixStyle } from '../../common/helpers/dom'\n  import CubeDrawerPanel from './drawer-panel.vue'\n  import visibilityMixin from '../../common/mixins/visibility'\n  import popupMixin from '../../common/mixins/popup'\n\n  const COMPONENT_NAME = 'cube-drawer'\n  const EVENT_CHANGE = 'change'\n  const EVENT_SELECT = 'select'\n  const EVENT_CANCEL = 'cancel'\n\n  const transform = prefixStyle('transform')\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [visibilityMixin, popupMixin],\n    props: {\n      title: {\n        type: String,\n        default: ''\n      },\n      data: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      },\n      selectedIndex: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      }\n    },\n    data() {\n      return {\n        index: -1,\n        selectedVal: [],\n        selectedText: [],\n        selected: [...this.selectedIndex],\n        slideStyle: {\n          [transform]: 'translate3d(0, 0, 0)'\n        }\n      }\n    },\n    watch: {\n      selectedIndex(newVal) {\n        this.selected = [...newVal]\n      },\n      index(newIndex, oldIndex) {\n        this.showPanel()\n        if (newIndex < oldIndex) {\n          this.hidePanel()\n        }\n      }\n    },\n    created() {\n      this.panels = []\n    },\n    methods: {\n      show() {\n        if (this.isVisible) {\n          return\n        }\n        this.isVisible = true\n\n        let len = this.data.length\n        for (let i = 0; i < len; i++) {\n          this.index = i\n          if (this.selected[i] < 0 || this.selected[i] === undefined) {\n            if (i > 0) {\n              const lastIndex = i - 1\n              const index = this.selected[lastIndex]\n              this.changeHandler(lastIndex, this.data[lastIndex][index], index)\n            }\n            break\n          }\n        }\n        this.computedStyle()\n      },\n      hide() {\n        this.slideStyle[transform] = 'translate3d(0, 0, 0)'\n        this.shouldHide = true\n      },\n      addPanel(panel) {\n        this.panels.push(panel)\n      },\n      removePanel(panel) {\n        const i = this.panels.indexOf(panel)\n        this.panels.splice(i, 1)\n      },\n      transitionend() {\n        if (this.shouldHide) {\n          this.isVisible = false\n          this.shouldHide = false\n        }\n      },\n      refill(panelIndex, data, index) {\n        this.$set(this.data, panelIndex, data)\n        this.index = panelIndex\n        this.selected = this.selected.slice(0, panelIndex)\n        this.selectedVal = this.selectedVal.slice(0, panelIndex)\n        this.selectedText = this.selectedText.slice(0, panelIndex)\n        if (index >= 0) {\n          this.$set(this.selected, panelIndex, index)\n          this.changeHandler(panelIndex, this.data[panelIndex][index], index)\n        }\n      },\n      showPanel() {\n        const index = this.index\n        let i = 0\n        while (i <= index) {\n          this.panels[i].show()\n          i++\n        }\n        this.computedStyle()\n      },\n      hidePanel() {\n        const len = this.data.length\n        let i = this.index + 1\n        while (i < len) {\n          this.panels[i].hide()\n          i++\n        }\n      },\n      computedStyle() {\n        this.$nextTick(() => {\n          let allWidth = 0\n          let i = 0\n          const index = this.index\n          while (i <= index) {\n            const el = this.panels[i].$el\n            allWidth += el.offsetWidth\n            const elStyle = window.getComputedStyle(el)\n            allWidth += parseInt(elStyle.marginLeft)\n            allWidth += parseInt(elStyle.marginRight)\n            i++\n          }\n          this.slideStyle[transform] = `translate3d(-${allWidth}px, 0, 0)`\n        })\n      },\n      changeHandler(panelIndex, item, index) {\n        if (typeof item === 'string') {\n          this.selectedVal[panelIndex] = item\n          this.selectedText[panelIndex] = item\n        } else {\n          this.selectedVal[panelIndex] = item.value\n          this.selectedText[panelIndex] = item.text\n        }\n        this.$set(this.selected, panelIndex, index)\n        if (panelIndex === (this.data.length - 1)) {\n          // last column\n          this.$emit(EVENT_SELECT, this.selectedVal, this.selected, this.selectedText)\n          this.hide()\n        } else {\n          this.$emit(EVENT_CHANGE, panelIndex, item, this.selectedVal, this.selected, this.selectedText)\n        }\n      },\n      drawerClick() {\n        this.hide()\n        this.$emit(EVENT_CANCEL)\n      }\n    },\n    components: {\n      CubeDrawerPanel\n    }\n  }\n</script>\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  @require \"../../common/stylus/mixin.styl\"\n\n  .cube-drawer\n    position: absolute\n    z-index: 5\n    top: 0\n    right: 0\n    bottom: 0\n    left: 0\n    overflow: hidden\n    color: $drawer-color\n  .cube-drawer-main\n    position: absolute\n    top: 0\n    left: 100%\n    bottom: 0\n    max-width: 90%\n    display: flex\n    flex-direction: column\n    overflow: hidden\n    transform: translate3d(0, 0, 0)\n    transition: transform .3s ease-in-out\n    box-shadow: -2px 0 2px rgba(0, 0, 0, .2)\n  .cube-drawer-title\n    position: relative\n    padding: 0 20px\n    height: 50px\n    line-height: 50px\n    border-bottom: 1px solid $drawer-title-bdc\n    font-size: $fontsize-large\n    background-color: $drawer-title-bgc\n  .cube-drawer-panels\n    display: flex\n    flex: 1\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}