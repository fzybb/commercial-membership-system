{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport CubeCheckbox from '../checkbox/checkbox.vue';\nimport groupCol from '../../common/mixins/group-col';\nvar COMPONENT_NAME = 'cube-checkbox-group';\nvar EVENT_INPUT = 'input';\nvar EVENT_CHECKED = 'checked';\nvar EVENT_CANCLE_CHECKED = 'cancel-checked';\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [groupCol],\n  props: {\n    value: {\n      type: Array\n    },\n    horizontal: {\n      type: Boolean,\n      \"default\": false\n    },\n    shape: {\n      type: String,\n      \"default\": 'circle'\n    },\n    position: {\n      type: String,\n      \"default\": 'left'\n    },\n    hollowStyle: {\n      type: Boolean,\n      \"default\": false\n    },\n    options: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    min: {\n      type: Number,\n      \"default\": 0\n    },\n    max: {\n      type: Number,\n      \"default\": Infinity\n    }\n  },\n  data: function data() {\n    return {\n      _value: [],\n      _checkboxGroup: true\n    };\n  },\n  computed: {\n    groupClass: function groupClass() {\n      if (!this.horizontal || this.colNum > 1) {\n        return 'border-top-1px border-bottom-1px';\n      }\n    }\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler: function handler(newValue, oldValue) {\n        this._value = this.value.concat();\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.$on(EVENT_CHECKED, function (value) {\n      if (_this._value.length < _this.max && _this._value.indexOf(value) === -1) {\n        _this._value.push(value);\n      }\n      _this.$emit(EVENT_INPUT, _this._value);\n    });\n    this.$on(EVENT_CANCLE_CHECKED, function (value) {\n      var index = _this._value.indexOf(value);\n      if (_this._value.length > _this.min && index > -1) {\n        _this._value.splice(index, 1);\n      }\n      _this.$emit(EVENT_INPUT, _this._value);\n    });\n  },\n  components: {\n    CubeCheckbox: CubeCheckbox\n  }\n};","map":{"version":3,"names":["CubeCheckbox","groupCol","COMPONENT_NAME","EVENT_INPUT","EVENT_CHECKED","EVENT_CANCLE_CHECKED","name","mixins","props","value","type","Array","horizontal","Boolean","shape","String","position","hollowStyle","options","_default","min","Number","max","Infinity","data","_value","_checkboxGroup","computed","groupClass","colNum","watch","immediate","handler","newValue","oldValue","concat","mounted","_this","$on","length","indexOf","push","$emit","index","splice","components"],"sources":["node_modules/cube-ui/src/components/checkbox-group/checkbox-group.vue"],"sourcesContent":["<template>\n  <div class=\"cube-checkbox-group\" ref=\"group\" :class=\"groupClass\" :data-horz=\"horizontal\" :data-col=\"colNum > 1\">\n    <slot>\n      <cube-checkbox\n        v-for=\"(option, index) in options\"\n        :key=\"index\"\n        :option=\"option\"\n        :shape=\"shape\"\n        :position=\"position\"\n        :hollow-style=\"hollowStyle\"\n      />\n    </slot>\n  </div>\n</template>\n<script type=\"text/ecmascript-6\">\n  import CubeCheckbox from '../checkbox/checkbox.vue'\n  import groupCol from '../../common/mixins/group-col'\n\n  const COMPONENT_NAME = 'cube-checkbox-group'\n  const EVENT_INPUT = 'input'\n  const EVENT_CHECKED = 'checked'\n  const EVENT_CANCLE_CHECKED = 'cancel-checked'\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [groupCol],\n    props: {\n      value: {\n        type: Array\n      },\n      horizontal: {\n        type: Boolean,\n        default: false\n      },\n      shape: {\n        type: String,\n        default: 'circle'\n      },\n      position: {\n        type: String,\n        default: 'left'\n      },\n      hollowStyle: {\n        type: Boolean,\n        default: false\n      },\n      options: {\n        type: Array,\n        default() {\n          return []\n        }\n      },\n      min: {\n        type: Number,\n        default: 0\n      },\n      max: {\n        type: Number,\n        default: Infinity\n      }\n    },\n    data () {\n      return {\n        _value: [],\n        _checkboxGroup: true\n      }\n    },\n    computed: {\n      groupClass() {\n        if (!this.horizontal || this.colNum > 1) {\n          return 'border-top-1px border-bottom-1px'\n        }\n      }\n    },\n    watch: {\n      value: {\n        immediate: true,\n        handler (newValue, oldValue) {\n          this._value = this.value.concat()\n        }\n      }\n    },\n    mounted () {\n      this.$on(EVENT_CHECKED, (value) => {\n        if (this._value.length < this.max && this._value.indexOf(value) === -1) {\n          this._value.push(value)\n        }\n        this.$emit(EVENT_INPUT, this._value)\n      })\n      this.$on(EVENT_CANCLE_CHECKED, (value) => {\n        const index = this._value.indexOf(value)\n        if (this._value.length > this.min && index > -1) {\n          this._value.splice(index, 1)\n        }\n        this.$emit(EVENT_INPUT, this._value)\n      })\n    },\n    components: {\n      CubeCheckbox\n    }\n  }\n</script>\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  @require \"../../common/stylus/mixin.styl\"\n\n  .cube-checkbox-group\n    z-index: 1\n    overflow: hidden\n    background-color: $checkbox-group-bgc\n    .cube-checkbox\n      &:last-child\n        .cube-checkbox-wrap\n          border-none()\n  .cube-checkbox-group[data-horz=\"true\"],\n  .cube-checkbox-group[data-col=\"true\"]\n    display: flex\n    padding-left: 0\n    border-1px($checkbox-group-horizontal-bdc, 2px)\n    border-radius: 2px\n    .cube-checkbox\n      flex-fix()\n      text-align: center\n      padding-left: 10px\n      padding-right: 10px\n      &::after\n        border-color: $checkbox-group-horizontal-bdc\n      &:last-child\n        border-none()\n      &[data-pos=\"right\"]\n        .cube-checkbox-ui\n          position: relative\n          margin-left: .42em\n          order: 1\n        .cube-checkbox-label\n          margin-right: 0\n    .cube-checkbox-wrap\n      justify-content: center\n.cube-checkbox-group[data-col=\"true\"]\n    flex-wrap: wrap\n    .cube-checkbox\n      flex: 0 0 auto\n      box-sizing: border-box\n      &::after\n        display: none\n</style>\n"],"mappings":";;;;;AAeA,OAAAA,YAAA;AACA,OAAAC,QAAA;AAEA,IAAAC,cAAA;AACA,IAAAC,WAAA;AACA,IAAAC,aAAA;AACA,IAAAC,oBAAA;AACA;EACAC,IAAA,EAAAJ,cAAA;EACAK,MAAA,GAAAN,QAAA;EACAO,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC;IACA;IACAC,UAAA;MACAF,IAAA,EAAAG,OAAA;MACA;IACA;IACAC,KAAA;MACAJ,IAAA,EAAAK,MAAA;MACA;IACA;IACAC,QAAA;MACAN,IAAA,EAAAK,MAAA;MACA;IACA;IACAE,WAAA;MACAP,IAAA,EAAAG,OAAA;MACA;IACA;IACAK,OAAA;MACAR,IAAA,EAAAC,KAAA;MAAA,oBAAAQ,SAAA,EACA;QACA;MACA;IACA;IACAC,GAAA;MACAV,IAAA,EAAAW,MAAA;MACA;IACA;IACAC,GAAA;MACAZ,IAAA,EAAAW,MAAA;MACA,WAAAE;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,MAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACAC,UAAA,WAAAA,WAAA;MACA,UAAAhB,UAAA,SAAAiB,MAAA;QACA;MACA;IACA;EACA;EACAC,KAAA;IACArB,KAAA;MACAsB,SAAA;MACAC,OAAA,WAAAA,QAAAC,QAAA,EAAAC,QAAA;QACA,KAAAT,MAAA,QAAAhB,KAAA,CAAA0B,MAAA;MACA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IAAA,IAAAC,KAAA;IACA,KAAAC,GAAA,CAAAlC,aAAA,YAAAK,KAAA;MACA,IAAA4B,KAAA,CAAAZ,MAAA,CAAAc,MAAA,GAAAF,KAAA,CAAAf,GAAA,IAAAe,KAAA,CAAAZ,MAAA,CAAAe,OAAA,CAAA/B,KAAA;QACA4B,KAAA,CAAAZ,MAAA,CAAAgB,IAAA,CAAAhC,KAAA;MACA;MACA4B,KAAA,CAAAK,KAAA,CAAAvC,WAAA,EAAAkC,KAAA,CAAAZ,MAAA;IACA;IACA,KAAAa,GAAA,CAAAjC,oBAAA,YAAAI,KAAA;MACA,IAAAkC,KAAA,GAAAN,KAAA,CAAAZ,MAAA,CAAAe,OAAA,CAAA/B,KAAA;MACA,IAAA4B,KAAA,CAAAZ,MAAA,CAAAc,MAAA,GAAAF,KAAA,CAAAjB,GAAA,IAAAuB,KAAA;QACAN,KAAA,CAAAZ,MAAA,CAAAmB,MAAA,CAAAD,KAAA;MACA;MACAN,KAAA,CAAAK,KAAA,CAAAvC,WAAA,EAAAkC,KAAA,CAAAZ,MAAA;IACA;EACA;EACAoB,UAAA;IACA7C,YAAA,EAAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}